{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":97,"index":97}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"]}},{"name":"./ExpoMediaLibrary","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":139},"end":{"line":3,"column":46,"index":185}}],"key":"yXHDHFsvtz5fKc5CK5Xe3zolTC8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.MediaType = void 0;\n  Object.defineProperty(exports, \"PermissionStatus\", {\n    enumerable: true,\n    get: function () {\n      return _expoModulesCore.PermissionStatus;\n    }\n  });\n  exports.SortBy = void 0;\n  exports.addAssetsToAlbumAsync = addAssetsToAlbumAsync;\n  exports.addListener = addListener;\n  exports.albumNeedsMigrationAsync = albumNeedsMigrationAsync;\n  exports.createAlbumAsync = createAlbumAsync;\n  exports.createAssetAsync = createAssetAsync;\n  exports.deleteAlbumsAsync = deleteAlbumsAsync;\n  exports.deleteAssetsAsync = deleteAssetsAsync;\n  exports.getAlbumAsync = getAlbumAsync;\n  exports.getAlbumsAsync = getAlbumsAsync;\n  exports.getAssetInfoAsync = getAssetInfoAsync;\n  exports.getAssetsAsync = getAssetsAsync;\n  exports.getMomentsAsync = getMomentsAsync;\n  exports.getPermissionsAsync = getPermissionsAsync;\n  exports.isAvailableAsync = isAvailableAsync;\n  exports.migrateAlbumIfNeededAsync = migrateAlbumIfNeededAsync;\n  exports.presentPermissionsPickerAsync = presentPermissionsPickerAsync;\n  exports.removeAllListeners = removeAllListeners;\n  exports.removeAssetsFromAlbumAsync = removeAssetsFromAlbumAsync;\n  exports.removeSubscription = removeSubscription;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  exports.saveToLibraryAsync = saveToLibraryAsync;\n  exports.usePermissions = void 0;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _Platform = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/Platform\"));\n  var _ExpoMediaLibrary = _interopRequireDefault(require(_dependencyMap[3], \"./ExpoMediaLibrary\"));\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n  let loggedExpoGoWarning = false;\n  if (isExpoGo && !loggedExpoGoWarning) {\n    console.warn('Due to changes in Androids permission requirements, Expo Go can no longer provide full access to the media library. To test the full functionality of this module, you can create a development build. https://docs.expo.dev/develop/development-builds/create-a-build');\n    loggedExpoGoWarning = true;\n  }\n  function arrayize(item) {\n    if (Array.isArray(item)) {\n      return item;\n    }\n    return item ? [item] : [];\n  }\n  function getId(ref) {\n    if (typeof ref === 'string') {\n      return ref;\n    }\n    return ref ? ref.id : undefined;\n  }\n  function checkAssetIds(assetIds) {\n    if (assetIds.some(id => !id || typeof id !== 'string')) {\n      throw new Error('Asset ID must be a string!');\n    }\n  }\n  function checkAlbumIds(albumIds) {\n    if (albumIds.some(id => !id || typeof id !== 'string')) {\n      throw new Error('Album ID must be a string!');\n    }\n  }\n  function checkMediaType(mediaType) {\n    if (Object.values(MediaType).indexOf(mediaType) === -1) {\n      throw new Error(`Invalid mediaType: ${mediaType}`);\n    }\n  }\n  function checkSortBy(sortBy) {\n    if (Array.isArray(sortBy)) {\n      checkSortByKey(sortBy[0]);\n      if (typeof sortBy[1] !== 'boolean') {\n        throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n      }\n    } else {\n      checkSortByKey(sortBy);\n    }\n  }\n  function checkSortByKey(sortBy) {\n    if (Object.values(SortBy).indexOf(sortBy) === -1) {\n      throw new Error(`Invalid sortBy key: ${sortBy}`);\n    }\n  }\n  function sortByOptionToString(sortBy) {\n    checkSortBy(sortBy);\n    if (Array.isArray(sortBy)) {\n      return `${sortBy[0]} ${sortBy[1] ? 'ASC' : 'DESC'}`;\n    }\n    return `${sortBy} DESC`;\n  }\n  function dateToNumber(value) {\n    return value instanceof Date ? value.getTime() : value;\n  }\n  // @needsAudit\n  /**\n   * Possible media types.\n   */\n  const MediaType = exports.MediaType = _ExpoMediaLibrary.default.MediaType;\n  // @needsAudit\n  /**\n   * Supported keys that can be used to sort `getAssetsAsync` results.\n   */\n  const SortBy = exports.SortBy = _ExpoMediaLibrary.default.SortBy;\n  // @needsAudit\n  /**\n   * Returns whether the Media Library API is enabled on the current device.\n   * @return A promise which fulfils with a `boolean`, indicating whether the Media Library API is\n   * available on the current device.\n   */\n  async function isAvailableAsync() {\n    return !!_ExpoMediaLibrary.default && 'getAssetsAsync' in _ExpoMediaLibrary.default;\n  }\n  // @needsAudit @docsMissing\n  /**\n   * Asks the user to grant permissions for accessing media in user's media library.\n   * @param writeOnly\n   * @param granularPermissions - A list of [`GranularPermission`](#granularpermission) values. This parameter has an\n   * effect only on Android 13 and newer. By default, `expo-media-library` will ask for all possible permissions.\n   *\n   * > When using granular permissions with a custom config plugin configuration, make sure that all the requested permissions are included in the plugin.\n   * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n   */\n  async function requestPermissionsAsync(writeOnly = false, granularPermissions) {\n    if (!_ExpoMediaLibrary.default.requestPermissionsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'requestPermissionsAsync');\n    }\n    if (_Platform.default.OS === 'android') {\n      return await _ExpoMediaLibrary.default.requestPermissionsAsync(writeOnly, granularPermissions);\n    }\n    return await _ExpoMediaLibrary.default.requestPermissionsAsync(writeOnly);\n  }\n  // @needsAudit @docsMissing\n  /**\n   * Checks user's permissions for accessing media library.\n   * @param writeOnly\n   * @param granularPermissions - A list of [`GranularPermission`](#granularpermission) values. This parameter has\n   * an effect only on Android 13 and newer. By default, `expo-media-library` will ask for all possible permissions.\n   * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n   */\n  async function getPermissionsAsync(writeOnly = false, granularPermissions) {\n    if (!_ExpoMediaLibrary.default.getPermissionsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'getPermissionsAsync');\n    }\n    if (_Platform.default.OS === 'android') {\n      return await _ExpoMediaLibrary.default.getPermissionsAsync(writeOnly, granularPermissions);\n    }\n    return await _ExpoMediaLibrary.default.getPermissionsAsync(writeOnly);\n  }\n  // @needsAudit\n  /**\n   * Check or request permissions to access the media library.\n   * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n   * ```\n   */\n  const usePermissions = exports.usePermissions = (0, _expoModulesCore.createPermissionHook)({\n    // TODO(cedric): permission requesters should have an options param or a different requester\n    getMethod: options => getPermissionsAsync(options?.writeOnly, options?.granularPermissions),\n    requestMethod: options => requestPermissionsAsync(options?.writeOnly, options?.granularPermissions)\n  });\n  // @needsAudit\n  /**\n   * Allows the user to update the assets that your app has access to.\n   * The system modal is only displayed if the user originally allowed only `limited` access to their\n   * media library, otherwise this method is a no-op.\n   * @param mediaTypes Limits the type(s) of media that the user will be granting access to. By default, a list that shows both photos and videos is presented.\n   *\n   * @return A promise that either rejects if the method is unavailable, or resolves to `void`.\n   * > __Note:__ This method doesn't inform you if the user changes which assets your app has access to.\n   * That information is only exposed by iOS, and to obtain it, you need to subscribe for updates to the user's media library using [`addListener()`](#medialibraryaddlistenerlistener).\n   * If `hasIncrementalChanges` is `false`, the user changed their permissions.\n   *\n   * @platform android 14+\n   * @platform ios\n   */\n  async function presentPermissionsPickerAsync(mediaTypes = ['photo', 'video']) {\n    if (_Platform.default.OS === 'android' && isExpoGo) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'presentPermissionsPickerAsync is unavailable in Expo Go');\n    }\n    if (_Platform.default.OS === 'android' && _Platform.default.Version >= 34) {\n      await _ExpoMediaLibrary.default.requestPermissionsAsync(false, mediaTypes);\n      return;\n    }\n    if (!_ExpoMediaLibrary.default.presentPermissionsPickerAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'presentPermissionsPickerAsync');\n    }\n    return await _ExpoMediaLibrary.default.presentPermissionsPickerAsync();\n  }\n  // @needsAudit\n  /**\n   * Creates an asset from existing file. The most common use case is to save a picture taken by [Camera](./camera).\n   * This method requires `CAMERA_ROLL` permission.\n   *\n   * @example\n   * ```js\n   * const { uri } = await Camera.takePictureAsync();\n   * const asset = await MediaLibrary.createAssetAsync(uri);\n   * ```\n   * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n   * must be a local path, so it must start with `file:///`\n   *\n   * @param album An [Album](#album) or its ID. If provided, the asset will be added to this album upon creation, otherwise it will be added to the default album for the media type.\n   * The album has exist.\n   * @return A promise which fulfils with an object representing an [`Asset`](#asset).\n   */\n  async function createAssetAsync(localUri, album) {\n    if (!_ExpoMediaLibrary.default.createAssetAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'createAssetAsync');\n    }\n    const albumId = getId(album);\n    if (!localUri || typeof localUri !== 'string') {\n      throw new Error('Invalid argument \"localUri\". It must be a string!');\n    }\n    const asset = await _ExpoMediaLibrary.default.createAssetAsync(localUri, albumId);\n    if (Array.isArray(asset)) {\n      // Android returns an array with asset, we need to pick the first item\n      return asset[0];\n    }\n    return asset;\n  }\n  // @needsAudit\n  /**\n   * Saves the file at given `localUri` to the user's media library. Unlike [`createAssetAsync()`](#medialibrarycreateassetasynclocaluri),\n   * This method doesn't return created asset.\n   * On __iOS 11+__, it's possible to use this method without asking for `CAMERA_ROLL` permission,\n   * however then yours `Info.plist` should have `NSPhotoLibraryAddUsageDescription` key.\n   * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n   * must be a local path, so it must start with `file:///`.\n   */\n  async function saveToLibraryAsync(localUri) {\n    if (!_ExpoMediaLibrary.default.saveToLibraryAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'saveToLibraryAsync');\n    }\n    return await _ExpoMediaLibrary.default.saveToLibraryAsync(localUri);\n  }\n  // @needsAudit\n  /**\n   * Adds array of assets to the album.\n   *\n   * On Android, by default it copies assets from the current album to provided one, however it's also\n   * possible to move them by passing `false` as `copyAssets` argument. In case they're copied you\n   * should keep in mind that `getAssetsAsync` will return duplicated assets.\n   * @param assets An array of [Asset](#asset) or their IDs.\n   * @param album An [Album](#album) or its ID.\n   * @param copy __Android only.__ Whether to copy assets to the new album instead of move them.\n   * Defaults to `true`.\n   * @return Returns promise which fulfils with `true` if the assets were successfully added to\n   * the album.\n   */\n  async function addAssetsToAlbumAsync(assets, album, copy = true) {\n    if (!_ExpoMediaLibrary.default.addAssetsToAlbumAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n    }\n    const assetIds = arrayize(assets).map(getId);\n    const albumId = getId(album);\n    checkAssetIds(assetIds);\n    if (!albumId || typeof albumId !== 'string') {\n      throw new Error('Invalid album ID. It must be a string!');\n    }\n    if (_Platform.default.OS === 'ios') {\n      return await _ExpoMediaLibrary.default.addAssetsToAlbumAsync(assetIds, albumId);\n    }\n    return await _ExpoMediaLibrary.default.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n  }\n  // @needsAudit\n  /**\n   * Removes given assets from album.\n   *\n   * On Android, album will be automatically deleted if there are no more assets inside.\n   * @param assets An array of [Asset](#asset) or their IDs.\n   * @param album An [Album](#album) or its ID.\n   * @return Returns promise which fulfils with `true` if the assets were successfully removed from\n   * the album.\n   */\n  async function removeAssetsFromAlbumAsync(assets, album) {\n    if (!_ExpoMediaLibrary.default.removeAssetsFromAlbumAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n    }\n    const assetIds = arrayize(assets).map(getId);\n    const albumId = getId(album);\n    checkAssetIds(assetIds);\n    return await _ExpoMediaLibrary.default.removeAssetsFromAlbumAsync(assetIds, albumId);\n  }\n  // @needsAudit\n  /**\n   * Deletes assets from the library. On iOS it deletes assets from all albums they belong to, while\n   * on Android it keeps all copies of them (album is strictly connected to the asset). Also, there is\n   * additional dialog on iOS that requires user to confirm this action.\n   * @param assets An array of [Asset](#asset) or their IDs.\n   * @return Returns promise which fulfils with `true` if the assets were successfully deleted.\n   */\n  async function deleteAssetsAsync(assets) {\n    if (!_ExpoMediaLibrary.default.deleteAssetsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n    }\n    const assetIds = arrayize(assets).map(getId);\n    checkAssetIds(assetIds);\n    return await _ExpoMediaLibrary.default.deleteAssetsAsync(assetIds);\n  }\n  // @needsAudit\n  /**\n   * Provides more information about an asset, including GPS location, local URI and EXIF metadata.\n   * @param asset An [Asset](#asset) or its ID.\n   * @param options\n   * @return An [AssetInfo](#assetinfo) object, which is an `Asset` extended by an additional fields.\n   */\n  async function getAssetInfoAsync(asset, options = {\n    shouldDownloadFromNetwork: true\n  }) {\n    if (!_ExpoMediaLibrary.default.getAssetInfoAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n    }\n    const assetId = getId(asset);\n    checkAssetIds([assetId]);\n    const assetInfo = await _ExpoMediaLibrary.default.getAssetInfoAsync(assetId, options);\n    if (Array.isArray(assetInfo)) {\n      // Android returns an array with asset info, we need to pick the first item\n      return assetInfo[0];\n    }\n    return assetInfo;\n  }\n  // @needsAudit\n  /**\n   * Queries for user-created albums in media gallery.\n   * @return A promise which fulfils with an array of [`Album`](#asset)s. Depending on Android version,\n   * root directory of your storage may be listed as album titled `\"0\"` or unlisted at all.\n   */\n  async function getAlbumsAsync({\n    includeSmartAlbums = false\n  } = {}) {\n    if (!_ExpoMediaLibrary.default.getAlbumsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n    }\n    return await _ExpoMediaLibrary.default.getAlbumsAsync({\n      includeSmartAlbums\n    });\n  }\n  // @needsAudit\n  /**\n   * Queries for an album with a specific name.\n   * @param title Name of the album to look for.\n   * @return An object representing an [`Album`](#album), if album with given name exists, otherwise\n   * returns `null`.\n   */\n  async function getAlbumAsync(title) {\n    if (!_ExpoMediaLibrary.default.getAlbumAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n    }\n    if (typeof title !== 'string') {\n      throw new Error('Album title must be a string!');\n    }\n    return await _ExpoMediaLibrary.default.getAlbumAsync(title);\n  }\n  // @needsAudit\n  /**\n   * Creates an album with given name and initial asset. The asset parameter is required on Android,\n   * since it's not possible to create empty album on this platform. On Android, by default it copies\n   * given asset from the current album to the new one, however it's also possible to move it by\n   * passing `false` as `copyAsset` argument.\n   * In case it's copied you should keep in mind that `getAssetsAsync` will return duplicated asset.\n   * > On Android, it's not possible to create an empty album. You must provide an existing asset to copy or move into the album or an uri of a local file, which will be used to create an initial asset for the album.\n   * @param albumName Name of the album to create.\n   * @param asset An [Asset](#asset) or its ID. On Android you either need to provide an asset or a localUri.\n   * @param initialAssetLocalUri A URI to the local media file, which will be used to create the initial asset inside the album. It must contain an extension. On Android it\n   * must be a local path, so it must start with `file:///`. If the `asset` was provided, this parameter will be ignored.\n   * @param copyAsset __Android Only.__ Whether to copy asset to the new album instead of move it. This parameter is ignored if `asset` was not provided.\n   * Defaults to `true`.\n   * @return Newly created [`Album`](#album).\n   */\n  async function createAlbumAsync(albumName, asset, copyAsset = true, initialAssetLocalUri) {\n    if (!_ExpoMediaLibrary.default.createAlbumAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n    }\n    const assetId = getId(asset);\n    if (_Platform.default.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0) && !initialAssetLocalUri) {\n      // it's not possible to create empty album on Android, so initial asset must be provided\n      throw new Error('MediaLibrary.createAlbumAsync must be called with an asset or a localUri on Android.');\n    }\n    if (!albumName || typeof albumName !== 'string') {\n      throw new Error('Invalid argument \"albumName\". It must be a string!');\n    }\n    if (assetId != null && typeof assetId !== 'string') {\n      throw new Error('Asset ID must be a string!');\n    }\n    if (_Platform.default.OS === 'ios') {\n      return await _ExpoMediaLibrary.default.createAlbumAsync(albumName, assetId, initialAssetLocalUri);\n    }\n    return await _ExpoMediaLibrary.default.createAlbumAsync(albumName, assetId, !!copyAsset, initialAssetLocalUri);\n  }\n  // @needsAudit\n  /**\n   * Deletes given albums from the library. On Android by default it deletes assets belonging to given\n   * albums from the library. On iOS it doesn't delete these assets, however it's possible to do by\n   * passing `true` as `deleteAssets`.\n   * @param albums An array of [`Album`](#asset)s or their IDs.\n   * @param assetRemove __iOS Only.__ Whether to also delete assets belonging to given albums.\n   * Defaults to `false`.\n   * @return Returns a promise which fulfils with `true` if the albums were successfully deleted from\n   * the library.\n   */\n  async function deleteAlbumsAsync(albums, assetRemove = false) {\n    if (!_ExpoMediaLibrary.default.deleteAlbumsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n    }\n    const albumIds = arrayize(albums).map(getId);\n    checkAlbumIds(albumIds);\n    if (_Platform.default.OS === 'android') {\n      return await _ExpoMediaLibrary.default.deleteAlbumsAsync(albumIds);\n    }\n    return await _ExpoMediaLibrary.default.deleteAlbumsAsync(albumIds, !!assetRemove);\n  }\n  // @needsAudit\n  /**\n   * Fetches a page of assets matching the provided criteria.\n   * @param assetsOptions\n   * @return A promise that fulfils with to [`PagedInfo`](#pagedinfo) object with array of [`Asset`](#asset)s.\n   */\n  async function getAssetsAsync(assetsOptions = {}) {\n    if (!_ExpoMediaLibrary.default.getAssetsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n    }\n    const {\n      first,\n      after,\n      album,\n      sortBy,\n      mediaType,\n      createdAfter,\n      createdBefore,\n      mediaSubtypes,\n      resolveWithFullInfo\n    } = assetsOptions;\n    const options = {\n      first: first == null ? 20 : first,\n      after: getId(after),\n      album: getId(album),\n      sortBy: arrayize(sortBy),\n      mediaType: arrayize(mediaType || [MediaType.photo]),\n      mediaSubtypes: arrayize(mediaSubtypes),\n      createdAfter: dateToNumber(createdAfter),\n      createdBefore: dateToNumber(createdBefore),\n      resolveWithFullInfo: resolveWithFullInfo ?? false\n    };\n    if (first != null && typeof options.first !== 'number') {\n      throw new Error('Option \"first\" must be a number!');\n    }\n    if (after != null && typeof options.after !== 'string') {\n      throw new Error('Option \"after\" must be a string!');\n    }\n    if (album != null && typeof options.album !== 'string') {\n      throw new Error('Option \"album\" must be a string!');\n    }\n    if (after != null && _Platform.default.OS === 'android' && isNaN(parseInt(getId(after), 10))) {\n      throw new Error('Option \"after\" must be a valid ID!');\n    }\n    if (first != null && first < 0) {\n      throw new Error('Option \"first\" must be a positive integer!');\n    }\n    options.mediaType.forEach(checkMediaType);\n    // TODO(@kitten): Add expected native types for `MediaLibrary`\n    return await _ExpoMediaLibrary.default.getAssetsAsync(Object.assign({}, options, {\n      sortBy: options.sortBy.map(sortByOptionToString)\n    }));\n  }\n  // @needsAudit\n  /**\n   * Subscribes for updates in user's media library.\n   * @param listener A callback that is fired when any assets have been inserted or deleted from the\n   * library. On Android it's invoked with an empty object. On iOS, it's invoked with [`MediaLibraryAssetsChangeEvent`](#medialibraryassetschangeevent)\n   * object.\n   *\n   * Additionally, only on iOS, the listener is also invoked when the user changes access to individual assets in the media library\n   * using `presentPermissionsPickerAsync()`.\n   * @return An [`Subscription`](#subscription) object that you can call `remove()` on when you would\n   * like to unsubscribe the listener.\n   */\n  function addListener(listener) {\n    return _ExpoMediaLibrary.default.addListener(_ExpoMediaLibrary.default.CHANGE_LISTENER_NAME, listener);\n  }\n  // @docsMissing\n  function removeSubscription(subscription) {\n    subscription.remove();\n  }\n  // @needsAudit\n  /**\n   * Removes all listeners.\n   */\n  function removeAllListeners() {\n    _ExpoMediaLibrary.default.removeAllListeners(_ExpoMediaLibrary.default.CHANGE_LISTENER_NAME);\n  }\n  // @needsAudit\n  /**\n   * Fetches a list of moments, which is a group of assets taken around the same place\n   * and time.\n   * @return An array of [albums](#album) whose type is `moment`.\n   * @platform ios\n   */\n  async function getMomentsAsync() {\n    if (!_ExpoMediaLibrary.default.getMomentsAsync) {\n      throw new _expoModulesCore.UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n    }\n    return await _ExpoMediaLibrary.default.getMomentsAsync();\n  }\n  // @needsAudit\n  /**\n   * Moves album content to the special media directories on **Android R** or **above** if needed.\n   * Those new locations are in line with the Android `scoped storage` - so your application won't\n   * lose write permission to those directories in the future.\n   *\n   * This method does nothing if:\n   * - app is running on **iOS**, **web** or **Android below R**\n   * - app has **write permission** to the album folder\n   *\n   * The migration is possible when the album contains only compatible files types.\n   * For instance, movies and pictures are compatible with each other, but music and pictures are not.\n   * If automatic migration isn't possible, the function rejects.\n   * In that case, you can use methods from the `expo-file-system` to migrate all your files manually.\n   *\n   * # Why do you need to migrate files?\n   * __Android R__ introduced a lot of changes in the storage system. Now applications can't save\n   * anything to the root directory. The only available locations are from the `MediaStore` API.\n   * Unfortunately, the media library stored albums in folders for which, because of those changes,\n   * the application doesn't have permissions anymore. However, it doesn't mean you need to migrate\n   * all your albums. If your application doesn't add assets to albums, you don't have to migrate.\n   * Everything will work as it used to. You can read more about scoped storage in [the Android documentation](https://developer.android.com/about/versions/11/privacy/storage).\n   *\n   * @param album An [Album](#album) or its ID.\n   * @return A promise which fulfils to `void`.\n   */\n  async function migrateAlbumIfNeededAsync(album) {\n    if (!_ExpoMediaLibrary.default.migrateAlbumIfNeededAsync) {\n      return;\n    }\n    return await _ExpoMediaLibrary.default.migrateAlbumIfNeededAsync(getId(album));\n  }\n  // @needsAudit\n  /**\n   * Checks if the album should be migrated to a different location. In other words, it checks if the\n   * application has the write permission to the album folder. If not, it returns `true`, otherwise `false`.\n   * > Note: For **Android below R**, **web** or **iOS**, this function always returns `false`.\n   * @param album An [Album](#album) or its ID.\n   * @return Returns a promise which fulfils with `true` if the album should be migrated.\n   */\n  async function albumNeedsMigrationAsync(album) {\n    if (!_ExpoMediaLibrary.default.albumNeedsMigrationAsync) {\n      return false;\n    }\n    return await _ExpoMediaLibrary.default.albumNeedsMigrationAsync(getId(album));\n  }\n});","lineCount":556,"map":[[36,2,1,0],[36,6,1,0,"_expoModulesCore"],[36,22,1,0],[36,25,1,0,"require"],[36,32,1,0],[36,33,1,0,"_dependencyMap"],[36,47,1,0],[37,2,1,97],[37,6,1,97,"_Platform"],[37,15,1,97],[37,18,1,97,"_interopRequireDefault"],[37,40,1,97],[37,41,1,97,"require"],[37,48,1,97],[37,49,1,97,"_dependencyMap"],[37,63,1,97],[38,2,3,0],[38,6,3,0,"_ExpoMediaLibrary"],[38,23,3,0],[38,26,3,0,"_interopRequireDefault"],[38,48,3,0],[38,49,3,0,"require"],[38,56,3,0],[38,57,3,0,"_dependencyMap"],[38,71,3,0],[39,2,4,0],[39,8,4,6,"isExpoGo"],[39,16,4,14],[39,19,4,17],[39,26,4,24,"expo"],[39,30,4,28],[39,35,4,33],[39,46,4,44],[39,50,4,48,"globalThis"],[39,60,4,58],[39,61,4,59,"expo"],[39,65,4,63],[39,67,4,65,"modules"],[39,74,4,72],[39,76,4,74,"ExpoGo"],[39,82,4,80],[40,2,5,0],[40,6,5,4,"loggedExpoGoWarning"],[40,25,5,23],[40,28,5,26],[40,33,5,31],[41,2,6,0],[41,6,6,4,"isExpoGo"],[41,14,6,12],[41,18,6,16],[41,19,6,17,"loggedExpoGoWarning"],[41,38,6,36],[41,40,6,38],[42,4,7,4,"console"],[42,11,7,11],[42,12,7,12,"warn"],[42,16,7,16],[42,17,7,17],[42,281,7,281],[42,282,7,282],[43,4,8,4,"loggedExpoGoWarning"],[43,23,8,23],[43,26,8,26],[43,30,8,30],[44,2,9,0],[45,2,11,0],[45,11,11,9,"arrayize"],[45,19,11,17,"arrayize"],[45,20,11,18,"item"],[45,24,11,22],[45,26,11,24],[46,4,12,4],[46,8,12,8,"Array"],[46,13,12,13],[46,14,12,14,"isArray"],[46,21,12,21],[46,22,12,22,"item"],[46,26,12,26],[46,27,12,27],[46,29,12,29],[47,6,13,8],[47,13,13,15,"item"],[47,17,13,19],[48,4,14,4],[49,4,15,4],[49,11,15,11,"item"],[49,15,15,15],[49,18,15,18],[49,19,15,19,"item"],[49,23,15,23],[49,24,15,24],[49,27,15,27],[49,29,15,29],[50,2,16,0],[51,2,17,0],[51,11,17,9,"getId"],[51,16,17,14,"getId"],[51,17,17,15,"ref"],[51,20,17,18],[51,22,17,20],[52,4,18,4],[52,8,18,8],[52,15,18,15,"ref"],[52,18,18,18],[52,23,18,23],[52,31,18,31],[52,33,18,33],[53,6,19,8],[53,13,19,15,"ref"],[53,16,19,18],[54,4,20,4],[55,4,21,4],[55,11,21,11,"ref"],[55,14,21,14],[55,17,21,17,"ref"],[55,20,21,20],[55,21,21,21,"id"],[55,23,21,23],[55,26,21,26,"undefined"],[55,35,21,35],[56,2,22,0],[57,2,23,0],[57,11,23,9,"checkAssetIds"],[57,24,23,22,"checkAssetIds"],[57,25,23,23,"assetIds"],[57,33,23,31],[57,35,23,33],[58,4,24,4],[58,8,24,8,"assetIds"],[58,16,24,16],[58,17,24,17,"some"],[58,21,24,21],[58,22,24,23,"id"],[58,24,24,25],[58,28,24,30],[58,29,24,31,"id"],[58,31,24,33],[58,35,24,37],[58,42,24,44,"id"],[58,44,24,46],[58,49,24,51],[58,57,24,59],[58,58,24,60],[58,60,24,62],[59,6,25,8],[59,12,25,14],[59,16,25,18,"Error"],[59,21,25,23],[59,22,25,24],[59,50,25,52],[59,51,25,53],[60,4,26,4],[61,2,27,0],[62,2,28,0],[62,11,28,9,"checkAlbumIds"],[62,24,28,22,"checkAlbumIds"],[62,25,28,23,"albumIds"],[62,33,28,31],[62,35,28,33],[63,4,29,4],[63,8,29,8,"albumIds"],[63,16,29,16],[63,17,29,17,"some"],[63,21,29,21],[63,22,29,23,"id"],[63,24,29,25],[63,28,29,30],[63,29,29,31,"id"],[63,31,29,33],[63,35,29,37],[63,42,29,44,"id"],[63,44,29,46],[63,49,29,51],[63,57,29,59],[63,58,29,60],[63,60,29,62],[64,6,30,8],[64,12,30,14],[64,16,30,18,"Error"],[64,21,30,23],[64,22,30,24],[64,50,30,52],[64,51,30,53],[65,4,31,4],[66,2,32,0],[67,2,33,0],[67,11,33,9,"checkMediaType"],[67,25,33,23,"checkMediaType"],[67,26,33,24,"mediaType"],[67,35,33,33],[67,37,33,35],[68,4,34,4],[68,8,34,8,"Object"],[68,14,34,14],[68,15,34,15,"values"],[68,21,34,21],[68,22,34,22,"MediaType"],[68,31,34,31],[68,32,34,32],[68,33,34,33,"indexOf"],[68,40,34,40],[68,41,34,41,"mediaType"],[68,50,34,50],[68,51,34,51],[68,56,34,56],[68,57,34,57],[68,58,34,58],[68,60,34,60],[69,6,35,8],[69,12,35,14],[69,16,35,18,"Error"],[69,21,35,23],[69,22,35,24],[69,44,35,46,"mediaType"],[69,53,35,55],[69,55,35,57],[69,56,35,58],[70,4,36,4],[71,2,37,0],[72,2,38,0],[72,11,38,9,"checkSortBy"],[72,22,38,20,"checkSortBy"],[72,23,38,21,"sortBy"],[72,29,38,27],[72,31,38,29],[73,4,39,4],[73,8,39,8,"Array"],[73,13,39,13],[73,14,39,14,"isArray"],[73,21,39,21],[73,22,39,22,"sortBy"],[73,28,39,28],[73,29,39,29],[73,31,39,31],[74,6,40,8,"checkSortByKey"],[74,20,40,22],[74,21,40,23,"sortBy"],[74,27,40,29],[74,28,40,30],[74,29,40,31],[74,30,40,32],[74,31,40,33],[75,6,41,8],[75,10,41,12],[75,17,41,19,"sortBy"],[75,23,41,25],[75,24,41,26],[75,25,41,27],[75,26,41,28],[75,31,41,33],[75,40,41,42],[75,42,41,44],[76,8,42,12],[76,14,42,18],[76,18,42,22,"Error"],[76,23,42,27],[76,24,42,28],[76,87,42,91],[76,88,42,92],[77,6,43,8],[78,4,44,4],[78,5,44,5],[78,11,45,9],[79,6,46,8,"checkSortByKey"],[79,20,46,22],[79,21,46,23,"sortBy"],[79,27,46,29],[79,28,46,30],[80,4,47,4],[81,2,48,0],[82,2,49,0],[82,11,49,9,"checkSortByKey"],[82,25,49,23,"checkSortByKey"],[82,26,49,24,"sortBy"],[82,32,49,30],[82,34,49,32],[83,4,50,4],[83,8,50,8,"Object"],[83,14,50,14],[83,15,50,15,"values"],[83,21,50,21],[83,22,50,22,"SortBy"],[83,28,50,28],[83,29,50,29],[83,30,50,30,"indexOf"],[83,37,50,37],[83,38,50,38,"sortBy"],[83,44,50,44],[83,45,50,45],[83,50,50,50],[83,51,50,51],[83,52,50,52],[83,54,50,54],[84,6,51,8],[84,12,51,14],[84,16,51,18,"Error"],[84,21,51,23],[84,22,51,24],[84,45,51,47,"sortBy"],[84,51,51,53],[84,53,51,55],[84,54,51,56],[85,4,52,4],[86,2,53,0],[87,2,54,0],[87,11,54,9,"sortByOptionToString"],[87,31,54,29,"sortByOptionToString"],[87,32,54,30,"sortBy"],[87,38,54,36],[87,40,54,38],[88,4,55,4,"checkSortBy"],[88,15,55,15],[88,16,55,16,"sortBy"],[88,22,55,22],[88,23,55,23],[89,4,56,4],[89,8,56,8,"Array"],[89,13,56,13],[89,14,56,14,"isArray"],[89,21,56,21],[89,22,56,22,"sortBy"],[89,28,56,28],[89,29,56,29],[89,31,56,31],[90,6,57,8],[90,13,57,15],[90,16,57,18,"sortBy"],[90,22,57,24],[90,23,57,25],[90,24,57,26],[90,25,57,27],[90,29,57,31,"sortBy"],[90,35,57,37],[90,36,57,38],[90,37,57,39],[90,38,57,40],[90,41,57,43],[90,46,57,48],[90,49,57,51],[90,55,57,57],[90,57,57,59],[91,4,58,4],[92,4,59,4],[92,11,59,11],[92,14,59,14,"sortBy"],[92,20,59,20],[92,27,59,27],[93,2,60,0],[94,2,61,0],[94,11,61,9,"dateToNumber"],[94,23,61,21,"dateToNumber"],[94,24,61,22,"value"],[94,29,61,27],[94,31,61,29],[95,4,62,4],[95,11,62,11,"value"],[95,16,62,16],[95,28,62,28,"Date"],[95,32,62,32],[95,35,62,35,"value"],[95,40,62,40],[95,41,62,41,"getTime"],[95,48,62,48],[95,49,62,49],[95,50,62,50],[95,53,62,53,"value"],[95,58,62,58],[96,2,63,0],[97,2,64,0],[98,2,65,0],[99,0,66,0],[100,0,67,0],[101,2,68,7],[101,8,68,13,"MediaType"],[101,17,68,22],[101,20,68,22,"exports"],[101,27,68,22],[101,28,68,22,"MediaType"],[101,37,68,22],[101,40,68,25,"MediaLibrary"],[101,65,68,37],[101,66,68,38,"MediaType"],[101,75,68,47],[102,2,69,0],[103,2,70,0],[104,0,71,0],[105,0,72,0],[106,2,73,7],[106,8,73,13,"SortBy"],[106,14,73,19],[106,17,73,19,"exports"],[106,24,73,19],[106,25,73,19,"SortBy"],[106,31,73,19],[106,34,73,22,"MediaLibrary"],[106,59,73,34],[106,60,73,35,"SortBy"],[106,66,73,41],[107,2,74,0],[108,2,75,0],[109,0,76,0],[110,0,77,0],[111,0,78,0],[112,0,79,0],[113,2,80,7],[113,17,80,22,"isAvailableAsync"],[113,33,80,38,"isAvailableAsync"],[113,34,80,38],[113,36,80,41],[114,4,81,4],[114,11,81,11],[114,12,81,12],[114,13,81,13,"MediaLibrary"],[114,38,81,25],[114,42,81,29],[114,58,81,45],[114,62,81,49,"MediaLibrary"],[114,87,81,61],[115,2,82,0],[116,2,83,0],[117,2,84,0],[118,0,85,0],[119,0,86,0],[120,0,87,0],[121,0,88,0],[122,0,89,0],[123,0,90,0],[124,0,91,0],[125,0,92,0],[126,2,93,7],[126,17,93,22,"requestPermissionsAsync"],[126,40,93,45,"requestPermissionsAsync"],[126,41,93,46,"writeOnly"],[126,50,93,55],[126,53,93,58],[126,58,93,63],[126,60,93,65,"granularPermissions"],[126,79,93,84],[126,81,93,86],[127,4,94,4],[127,8,94,8],[127,9,94,9,"MediaLibrary"],[127,34,94,21],[127,35,94,22,"requestPermissionsAsync"],[127,58,94,45],[127,60,94,47],[128,6,95,8],[128,12,95,14],[128,16,95,18,"UnavailabilityError"],[128,52,95,37],[128,53,95,38],[128,67,95,52],[128,69,95,54],[128,94,95,79],[128,95,95,80],[129,4,96,4],[130,4,97,4],[130,8,97,8,"Platform"],[130,25,97,16],[130,26,97,17,"OS"],[130,28,97,19],[130,33,97,24],[130,42,97,33],[130,44,97,35],[131,6,98,8],[131,13,98,15],[131,19,98,21,"MediaLibrary"],[131,44,98,33],[131,45,98,34,"requestPermissionsAsync"],[131,68,98,57],[131,69,98,58,"writeOnly"],[131,78,98,67],[131,80,98,69,"granularPermissions"],[131,99,98,88],[131,100,98,89],[132,4,99,4],[133,4,100,4],[133,11,100,11],[133,17,100,17,"MediaLibrary"],[133,42,100,29],[133,43,100,30,"requestPermissionsAsync"],[133,66,100,53],[133,67,100,54,"writeOnly"],[133,76,100,63],[133,77,100,64],[134,2,101,0],[135,2,102,0],[136,2,103,0],[137,0,104,0],[138,0,105,0],[139,0,106,0],[140,0,107,0],[141,0,108,0],[142,0,109,0],[143,2,110,7],[143,17,110,22,"getPermissionsAsync"],[143,36,110,41,"getPermissionsAsync"],[143,37,110,42,"writeOnly"],[143,46,110,51],[143,49,110,54],[143,54,110,59],[143,56,110,61,"granularPermissions"],[143,75,110,80],[143,77,110,82],[144,4,111,4],[144,8,111,8],[144,9,111,9,"MediaLibrary"],[144,34,111,21],[144,35,111,22,"getPermissionsAsync"],[144,54,111,41],[144,56,111,43],[145,6,112,8],[145,12,112,14],[145,16,112,18,"UnavailabilityError"],[145,52,112,37],[145,53,112,38],[145,67,112,52],[145,69,112,54],[145,90,112,75],[145,91,112,76],[146,4,113,4],[147,4,114,4],[147,8,114,8,"Platform"],[147,25,114,16],[147,26,114,17,"OS"],[147,28,114,19],[147,33,114,24],[147,42,114,33],[147,44,114,35],[148,6,115,8],[148,13,115,15],[148,19,115,21,"MediaLibrary"],[148,44,115,33],[148,45,115,34,"getPermissionsAsync"],[148,64,115,53],[148,65,115,54,"writeOnly"],[148,74,115,63],[148,76,115,65,"granularPermissions"],[148,95,115,84],[148,96,115,85],[149,4,116,4],[150,4,117,4],[150,11,117,11],[150,17,117,17,"MediaLibrary"],[150,42,117,29],[150,43,117,30,"getPermissionsAsync"],[150,62,117,49],[150,63,117,50,"writeOnly"],[150,72,117,59],[150,73,117,60],[151,2,118,0],[152,2,119,0],[153,2,120,0],[154,0,121,0],[155,0,122,0],[156,0,123,0],[157,0,124,0],[158,0,125,0],[159,0,126,0],[160,0,127,0],[161,0,128,0],[162,2,129,7],[162,8,129,13,"usePermissions"],[162,22,129,27],[162,25,129,27,"exports"],[162,32,129,27],[162,33,129,27,"usePermissions"],[162,47,129,27],[162,50,129,30],[162,54,129,30,"createPermissionHook"],[162,91,129,50],[162,93,129,51],[163,4,130,4],[164,4,131,4,"getMethod"],[164,13,131,13],[164,15,131,16,"options"],[164,22,131,23],[164,26,131,28,"getPermissionsAsync"],[164,45,131,47],[164,46,131,48,"options"],[164,53,131,55],[164,55,131,57,"writeOnly"],[164,64,131,66],[164,66,131,68,"options"],[164,73,131,75],[164,75,131,77,"granularPermissions"],[164,94,131,96],[164,95,131,97],[165,4,132,4,"requestMethod"],[165,17,132,17],[165,19,132,20,"options"],[165,26,132,27],[165,30,132,32,"requestPermissionsAsync"],[165,53,132,55],[165,54,132,56,"options"],[165,61,132,63],[165,63,132,65,"writeOnly"],[165,72,132,74],[165,74,132,76,"options"],[165,81,132,83],[165,83,132,85,"granularPermissions"],[165,102,132,104],[166,2,133,0],[166,3,133,1],[166,4,133,2],[167,2,134,0],[168,2,135,0],[169,0,136,0],[170,0,137,0],[171,0,138,0],[172,0,139,0],[173,0,140,0],[174,0,141,0],[175,0,142,0],[176,0,143,0],[177,0,144,0],[178,0,145,0],[179,0,146,0],[180,0,147,0],[181,0,148,0],[182,2,149,7],[182,17,149,22,"presentPermissionsPickerAsync"],[182,46,149,51,"presentPermissionsPickerAsync"],[182,47,149,52,"mediaTypes"],[182,57,149,62],[182,60,149,65],[182,61,149,66],[182,68,149,73],[182,70,149,75],[182,77,149,82],[182,78,149,83],[182,80,149,85],[183,4,150,4],[183,8,150,8,"Platform"],[183,25,150,16],[183,26,150,17,"OS"],[183,28,150,19],[183,33,150,24],[183,42,150,33],[183,46,150,37,"isExpoGo"],[183,54,150,45],[183,56,150,47],[184,6,151,8],[184,12,151,14],[184,16,151,18,"UnavailabilityError"],[184,52,151,37],[184,53,151,38],[184,67,151,52],[184,69,151,54],[184,126,151,111],[184,127,151,112],[185,4,152,4],[186,4,153,4],[186,8,153,8,"Platform"],[186,25,153,16],[186,26,153,17,"OS"],[186,28,153,19],[186,33,153,24],[186,42,153,33],[186,46,153,37,"Platform"],[186,63,153,45],[186,64,153,46,"Version"],[186,71,153,53],[186,75,153,57],[186,77,153,59],[186,79,153,61],[187,6,154,8],[187,12,154,14,"MediaLibrary"],[187,37,154,26],[187,38,154,27,"requestPermissionsAsync"],[187,61,154,50],[187,62,154,51],[187,67,154,56],[187,69,154,58,"mediaTypes"],[187,79,154,68],[187,80,154,69],[188,6,155,8],[189,4,156,4],[190,4,157,4],[190,8,157,8],[190,9,157,9,"MediaLibrary"],[190,34,157,21],[190,35,157,22,"presentPermissionsPickerAsync"],[190,64,157,51],[190,66,157,53],[191,6,158,8],[191,12,158,14],[191,16,158,18,"UnavailabilityError"],[191,52,158,37],[191,53,158,38],[191,67,158,52],[191,69,158,54],[191,100,158,85],[191,101,158,86],[192,4,159,4],[193,4,160,4],[193,11,160,11],[193,17,160,17,"MediaLibrary"],[193,42,160,29],[193,43,160,30,"presentPermissionsPickerAsync"],[193,72,160,59],[193,73,160,60],[193,74,160,61],[194,2,161,0],[195,2,162,0],[196,2,163,0],[197,0,164,0],[198,0,165,0],[199,0,166,0],[200,0,167,0],[201,0,168,0],[202,0,169,0],[203,0,170,0],[204,0,171,0],[205,0,172,0],[206,0,173,0],[207,0,174,0],[208,0,175,0],[209,0,176,0],[210,0,177,0],[211,0,178,0],[212,2,179,7],[212,17,179,22,"createAssetAsync"],[212,33,179,38,"createAssetAsync"],[212,34,179,39,"localUri"],[212,42,179,47],[212,44,179,49,"album"],[212,49,179,54],[212,51,179,56],[213,4,180,4],[213,8,180,8],[213,9,180,9,"MediaLibrary"],[213,34,180,21],[213,35,180,22,"createAssetAsync"],[213,51,180,38],[213,53,180,40],[214,6,181,8],[214,12,181,14],[214,16,181,18,"UnavailabilityError"],[214,52,181,37],[214,53,181,38],[214,67,181,52],[214,69,181,54],[214,87,181,72],[214,88,181,73],[215,4,182,4],[216,4,183,4],[216,10,183,10,"albumId"],[216,17,183,17],[216,20,183,20,"getId"],[216,25,183,25],[216,26,183,26,"album"],[216,31,183,31],[216,32,183,32],[217,4,184,4],[217,8,184,8],[217,9,184,9,"localUri"],[217,17,184,17],[217,21,184,21],[217,28,184,28,"localUri"],[217,36,184,36],[217,41,184,41],[217,49,184,49],[217,51,184,51],[218,6,185,8],[218,12,185,14],[218,16,185,18,"Error"],[218,21,185,23],[218,22,185,24],[218,73,185,75],[218,74,185,76],[219,4,186,4],[220,4,187,4],[220,10,187,10,"asset"],[220,15,187,15],[220,18,187,18],[220,24,187,24,"MediaLibrary"],[220,49,187,36],[220,50,187,37,"createAssetAsync"],[220,66,187,53],[220,67,187,54,"localUri"],[220,75,187,62],[220,77,187,64,"albumId"],[220,84,187,71],[220,85,187,72],[221,4,188,4],[221,8,188,8,"Array"],[221,13,188,13],[221,14,188,14,"isArray"],[221,21,188,21],[221,22,188,22,"asset"],[221,27,188,27],[221,28,188,28],[221,30,188,30],[222,6,189,8],[223,6,190,8],[223,13,190,15,"asset"],[223,18,190,20],[223,19,190,21],[223,20,190,22],[223,21,190,23],[224,4,191,4],[225,4,192,4],[225,11,192,11,"asset"],[225,16,192,16],[226,2,193,0],[227,2,194,0],[228,2,195,0],[229,0,196,0],[230,0,197,0],[231,0,198,0],[232,0,199,0],[233,0,200,0],[234,0,201,0],[235,0,202,0],[236,2,203,7],[236,17,203,22,"saveToLibraryAsync"],[236,35,203,40,"saveToLibraryAsync"],[236,36,203,41,"localUri"],[236,44,203,49],[236,46,203,51],[237,4,204,4],[237,8,204,8],[237,9,204,9,"MediaLibrary"],[237,34,204,21],[237,35,204,22,"saveToLibraryAsync"],[237,53,204,40],[237,55,204,42],[238,6,205,8],[238,12,205,14],[238,16,205,18,"UnavailabilityError"],[238,52,205,37],[238,53,205,38],[238,67,205,52],[238,69,205,54],[238,89,205,74],[238,90,205,75],[239,4,206,4],[240,4,207,4],[240,11,207,11],[240,17,207,17,"MediaLibrary"],[240,42,207,29],[240,43,207,30,"saveToLibraryAsync"],[240,61,207,48],[240,62,207,49,"localUri"],[240,70,207,57],[240,71,207,58],[241,2,208,0],[242,2,209,0],[243,2,210,0],[244,0,211,0],[245,0,212,0],[246,0,213,0],[247,0,214,0],[248,0,215,0],[249,0,216,0],[250,0,217,0],[251,0,218,0],[252,0,219,0],[253,0,220,0],[254,0,221,0],[255,0,222,0],[256,2,223,7],[256,17,223,22,"addAssetsToAlbumAsync"],[256,38,223,43,"addAssetsToAlbumAsync"],[256,39,223,44,"assets"],[256,45,223,50],[256,47,223,52,"album"],[256,52,223,57],[256,54,223,59,"copy"],[256,58,223,63],[256,61,223,66],[256,65,223,70],[256,67,223,72],[257,4,224,4],[257,8,224,8],[257,9,224,9,"MediaLibrary"],[257,34,224,21],[257,35,224,22,"addAssetsToAlbumAsync"],[257,56,224,43],[257,58,224,45],[258,6,225,8],[258,12,225,14],[258,16,225,18,"UnavailabilityError"],[258,52,225,37],[258,53,225,38],[258,67,225,52],[258,69,225,54],[258,92,225,77],[258,93,225,78],[259,4,226,4],[260,4,227,4],[260,10,227,10,"assetIds"],[260,18,227,18],[260,21,227,21,"arrayize"],[260,29,227,29],[260,30,227,30,"assets"],[260,36,227,36],[260,37,227,37],[260,38,227,38,"map"],[260,41,227,41],[260,42,227,42,"getId"],[260,47,227,47],[260,48,227,48],[261,4,228,4],[261,10,228,10,"albumId"],[261,17,228,17],[261,20,228,20,"getId"],[261,25,228,25],[261,26,228,26,"album"],[261,31,228,31],[261,32,228,32],[262,4,229,4,"checkAssetIds"],[262,17,229,17],[262,18,229,18,"assetIds"],[262,26,229,26],[262,27,229,27],[263,4,230,4],[263,8,230,8],[263,9,230,9,"albumId"],[263,16,230,16],[263,20,230,20],[263,27,230,27,"albumId"],[263,34,230,34],[263,39,230,39],[263,47,230,47],[263,49,230,49],[264,6,231,8],[264,12,231,14],[264,16,231,18,"Error"],[264,21,231,23],[264,22,231,24],[264,62,231,64],[264,63,231,65],[265,4,232,4],[266,4,233,4],[266,8,233,8,"Platform"],[266,25,233,16],[266,26,233,17,"OS"],[266,28,233,19],[266,33,233,24],[266,38,233,29],[266,40,233,31],[267,6,234,8],[267,13,234,15],[267,19,234,21,"MediaLibrary"],[267,44,234,33],[267,45,234,34,"addAssetsToAlbumAsync"],[267,66,234,55],[267,67,234,56,"assetIds"],[267,75,234,64],[267,77,234,66,"albumId"],[267,84,234,73],[267,85,234,74],[268,4,235,4],[269,4,236,4],[269,11,236,11],[269,17,236,17,"MediaLibrary"],[269,42,236,29],[269,43,236,30,"addAssetsToAlbumAsync"],[269,64,236,51],[269,65,236,52,"assetIds"],[269,73,236,60],[269,75,236,62,"albumId"],[269,82,236,69],[269,84,236,71],[269,85,236,72],[269,86,236,73,"copy"],[269,90,236,77],[269,91,236,78],[270,2,237,0],[271,2,238,0],[272,2,239,0],[273,0,240,0],[274,0,241,0],[275,0,242,0],[276,0,243,0],[277,0,244,0],[278,0,245,0],[279,0,246,0],[280,0,247,0],[281,2,248,7],[281,17,248,22,"removeAssetsFromAlbumAsync"],[281,43,248,48,"removeAssetsFromAlbumAsync"],[281,44,248,49,"assets"],[281,50,248,55],[281,52,248,57,"album"],[281,57,248,62],[281,59,248,64],[282,4,249,4],[282,8,249,8],[282,9,249,9,"MediaLibrary"],[282,34,249,21],[282,35,249,22,"removeAssetsFromAlbumAsync"],[282,61,249,48],[282,63,249,50],[283,6,250,8],[283,12,250,14],[283,16,250,18,"UnavailabilityError"],[283,52,250,37],[283,53,250,38],[283,67,250,52],[283,69,250,54],[283,97,250,82],[283,98,250,83],[284,4,251,4],[285,4,252,4],[285,10,252,10,"assetIds"],[285,18,252,18],[285,21,252,21,"arrayize"],[285,29,252,29],[285,30,252,30,"assets"],[285,36,252,36],[285,37,252,37],[285,38,252,38,"map"],[285,41,252,41],[285,42,252,42,"getId"],[285,47,252,47],[285,48,252,48],[286,4,253,4],[286,10,253,10,"albumId"],[286,17,253,17],[286,20,253,20,"getId"],[286,25,253,25],[286,26,253,26,"album"],[286,31,253,31],[286,32,253,32],[287,4,254,4,"checkAssetIds"],[287,17,254,17],[287,18,254,18,"assetIds"],[287,26,254,26],[287,27,254,27],[288,4,255,4],[288,11,255,11],[288,17,255,17,"MediaLibrary"],[288,42,255,29],[288,43,255,30,"removeAssetsFromAlbumAsync"],[288,69,255,56],[288,70,255,57,"assetIds"],[288,78,255,65],[288,80,255,67,"albumId"],[288,87,255,74],[288,88,255,75],[289,2,256,0],[290,2,257,0],[291,2,258,0],[292,0,259,0],[293,0,260,0],[294,0,261,0],[295,0,262,0],[296,0,263,0],[297,0,264,0],[298,2,265,7],[298,17,265,22,"deleteAssetsAsync"],[298,34,265,39,"deleteAssetsAsync"],[298,35,265,40,"assets"],[298,41,265,46],[298,43,265,48],[299,4,266,4],[299,8,266,8],[299,9,266,9,"MediaLibrary"],[299,34,266,21],[299,35,266,22,"deleteAssetsAsync"],[299,52,266,39],[299,54,266,41],[300,6,267,8],[300,12,267,14],[300,16,267,18,"UnavailabilityError"],[300,52,267,37],[300,53,267,38],[300,67,267,52],[300,69,267,54],[300,88,267,73],[300,89,267,74],[301,4,268,4],[302,4,269,4],[302,10,269,10,"assetIds"],[302,18,269,18],[302,21,269,21,"arrayize"],[302,29,269,29],[302,30,269,30,"assets"],[302,36,269,36],[302,37,269,37],[302,38,269,38,"map"],[302,41,269,41],[302,42,269,42,"getId"],[302,47,269,47],[302,48,269,48],[303,4,270,4,"checkAssetIds"],[303,17,270,17],[303,18,270,18,"assetIds"],[303,26,270,26],[303,27,270,27],[304,4,271,4],[304,11,271,11],[304,17,271,17,"MediaLibrary"],[304,42,271,29],[304,43,271,30,"deleteAssetsAsync"],[304,60,271,47],[304,61,271,48,"assetIds"],[304,69,271,56],[304,70,271,57],[305,2,272,0],[306,2,273,0],[307,2,274,0],[308,0,275,0],[309,0,276,0],[310,0,277,0],[311,0,278,0],[312,0,279,0],[313,2,280,7],[313,17,280,22,"getAssetInfoAsync"],[313,34,280,39,"getAssetInfoAsync"],[313,35,280,40,"asset"],[313,40,280,45],[313,42,280,47,"options"],[313,49,280,54],[313,52,280,57],[314,4,280,59,"shouldDownloadFromNetwork"],[314,29,280,84],[314,31,280,86],[315,2,280,91],[315,3,280,92],[315,5,280,94],[316,4,281,4],[316,8,281,8],[316,9,281,9,"MediaLibrary"],[316,34,281,21],[316,35,281,22,"getAssetInfoAsync"],[316,52,281,39],[316,54,281,41],[317,6,282,8],[317,12,282,14],[317,16,282,18,"UnavailabilityError"],[317,52,282,37],[317,53,282,38],[317,67,282,52],[317,69,282,54],[317,88,282,73],[317,89,282,74],[318,4,283,4],[319,4,284,4],[319,10,284,10,"assetId"],[319,17,284,17],[319,20,284,20,"getId"],[319,25,284,25],[319,26,284,26,"asset"],[319,31,284,31],[319,32,284,32],[320,4,285,4,"checkAssetIds"],[320,17,285,17],[320,18,285,18],[320,19,285,19,"assetId"],[320,26,285,26],[320,27,285,27],[320,28,285,28],[321,4,286,4],[321,10,286,10,"assetInfo"],[321,19,286,19],[321,22,286,22],[321,28,286,28,"MediaLibrary"],[321,53,286,40],[321,54,286,41,"getAssetInfoAsync"],[321,71,286,58],[321,72,286,59,"assetId"],[321,79,286,66],[321,81,286,68,"options"],[321,88,286,75],[321,89,286,76],[322,4,287,4],[322,8,287,8,"Array"],[322,13,287,13],[322,14,287,14,"isArray"],[322,21,287,21],[322,22,287,22,"assetInfo"],[322,31,287,31],[322,32,287,32],[322,34,287,34],[323,6,288,8],[324,6,289,8],[324,13,289,15,"assetInfo"],[324,22,289,24],[324,23,289,25],[324,24,289,26],[324,25,289,27],[325,4,290,4],[326,4,291,4],[326,11,291,11,"assetInfo"],[326,20,291,20],[327,2,292,0],[328,2,293,0],[329,2,294,0],[330,0,295,0],[331,0,296,0],[332,0,297,0],[333,0,298,0],[334,2,299,7],[334,17,299,22,"getAlbumsAsync"],[334,31,299,36,"getAlbumsAsync"],[334,32,299,37],[335,4,299,39,"includeSmartAlbums"],[335,22,299,57],[335,25,299,60],[336,2,299,66],[336,3,299,67],[336,6,299,70],[336,7,299,71],[336,8,299,72],[336,10,299,74],[337,4,300,4],[337,8,300,8],[337,9,300,9,"MediaLibrary"],[337,34,300,21],[337,35,300,22,"getAlbumsAsync"],[337,49,300,36],[337,51,300,38],[338,6,301,8],[338,12,301,14],[338,16,301,18,"UnavailabilityError"],[338,52,301,37],[338,53,301,38],[338,67,301,52],[338,69,301,54],[338,85,301,70],[338,86,301,71],[339,4,302,4],[340,4,303,4],[340,11,303,11],[340,17,303,17,"MediaLibrary"],[340,42,303,29],[340,43,303,30,"getAlbumsAsync"],[340,57,303,44],[340,58,303,45],[341,6,303,47,"includeSmartAlbums"],[342,4,303,66],[342,5,303,67],[342,6,303,68],[343,2,304,0],[344,2,305,0],[345,2,306,0],[346,0,307,0],[347,0,308,0],[348,0,309,0],[349,0,310,0],[350,0,311,0],[351,2,312,7],[351,17,312,22,"getAlbumAsync"],[351,30,312,35,"getAlbumAsync"],[351,31,312,36,"title"],[351,36,312,41],[351,38,312,43],[352,4,313,4],[352,8,313,8],[352,9,313,9,"MediaLibrary"],[352,34,313,21],[352,35,313,22,"getAlbumAsync"],[352,48,313,35],[352,50,313,37],[353,6,314,8],[353,12,314,14],[353,16,314,18,"UnavailabilityError"],[353,52,314,37],[353,53,314,38],[353,67,314,52],[353,69,314,54],[353,84,314,69],[353,85,314,70],[354,4,315,4],[355,4,316,4],[355,8,316,8],[355,15,316,15,"title"],[355,20,316,20],[355,25,316,25],[355,33,316,33],[355,35,316,35],[356,6,317,8],[356,12,317,14],[356,16,317,18,"Error"],[356,21,317,23],[356,22,317,24],[356,53,317,55],[356,54,317,56],[357,4,318,4],[358,4,319,4],[358,11,319,11],[358,17,319,17,"MediaLibrary"],[358,42,319,29],[358,43,319,30,"getAlbumAsync"],[358,56,319,43],[358,57,319,44,"title"],[358,62,319,49],[358,63,319,50],[359,2,320,0],[360,2,321,0],[361,2,322,0],[362,0,323,0],[363,0,324,0],[364,0,325,0],[365,0,326,0],[366,0,327,0],[367,0,328,0],[368,0,329,0],[369,0,330,0],[370,0,331,0],[371,0,332,0],[372,0,333,0],[373,0,334,0],[374,0,335,0],[375,0,336,0],[376,2,337,7],[376,17,337,22,"createAlbumAsync"],[376,33,337,38,"createAlbumAsync"],[376,34,337,39,"albumName"],[376,43,337,48],[376,45,337,50,"asset"],[376,50,337,55],[376,52,337,57,"copyAsset"],[376,61,337,66],[376,64,337,69],[376,68,337,73],[376,70,337,75,"initialAssetLocalUri"],[376,90,337,95],[376,92,337,97],[377,4,338,4],[377,8,338,8],[377,9,338,9,"MediaLibrary"],[377,34,338,21],[377,35,338,22,"createAlbumAsync"],[377,51,338,38],[377,53,338,40],[378,6,339,8],[378,12,339,14],[378,16,339,18,"UnavailabilityError"],[378,52,339,37],[378,53,339,38],[378,67,339,52],[378,69,339,54],[378,87,339,72],[378,88,339,73],[379,4,340,4],[380,4,341,4],[380,10,341,10,"assetId"],[380,17,341,17],[380,20,341,20,"getId"],[380,25,341,25],[380,26,341,26,"asset"],[380,31,341,31],[380,32,341,32],[381,4,342,4],[381,8,342,8,"Platform"],[381,25,342,16],[381,26,342,17,"OS"],[381,28,342,19],[381,33,342,24],[381,42,342,33],[381,47,343,9],[381,54,343,16,"assetId"],[381,61,343,23],[381,66,343,28],[381,74,343,36],[381,78,343,40,"assetId"],[381,85,343,47],[381,86,343,48,"length"],[381,92,343,54],[381,97,343,59],[381,98,343,60],[381,99,343,61],[381,103,344,8],[381,104,344,9,"initialAssetLocalUri"],[381,124,344,29],[381,126,344,31],[382,6,345,8],[383,6,346,8],[383,12,346,14],[383,16,346,18,"Error"],[383,21,346,23],[383,22,346,24],[383,108,346,110],[383,109,346,111],[384,4,347,4],[385,4,348,4],[385,8,348,8],[385,9,348,9,"albumName"],[385,18,348,18],[385,22,348,22],[385,29,348,29,"albumName"],[385,38,348,38],[385,43,348,43],[385,51,348,51],[385,53,348,53],[386,6,349,8],[386,12,349,14],[386,16,349,18,"Error"],[386,21,349,23],[386,22,349,24],[386,74,349,76],[386,75,349,77],[387,4,350,4],[388,4,351,4],[388,8,351,8,"assetId"],[388,15,351,15],[388,19,351,19],[388,23,351,23],[388,27,351,27],[388,34,351,34,"assetId"],[388,41,351,41],[388,46,351,46],[388,54,351,54],[388,56,351,56],[389,6,352,8],[389,12,352,14],[389,16,352,18,"Error"],[389,21,352,23],[389,22,352,24],[389,50,352,52],[389,51,352,53],[390,4,353,4],[391,4,354,4],[391,8,354,8,"Platform"],[391,25,354,16],[391,26,354,17,"OS"],[391,28,354,19],[391,33,354,24],[391,38,354,29],[391,40,354,31],[392,6,355,8],[392,13,355,15],[392,19,355,21,"MediaLibrary"],[392,44,355,33],[392,45,355,34,"createAlbumAsync"],[392,61,355,50],[392,62,355,51,"albumName"],[392,71,355,60],[392,73,355,62,"assetId"],[392,80,355,69],[392,82,355,71,"initialAssetLocalUri"],[392,102,355,91],[392,103,355,92],[393,4,356,4],[394,4,357,4],[394,11,357,11],[394,17,357,17,"MediaLibrary"],[394,42,357,29],[394,43,357,30,"createAlbumAsync"],[394,59,357,46],[394,60,357,47,"albumName"],[394,69,357,56],[394,71,357,58,"assetId"],[394,78,357,65],[394,80,357,67],[394,81,357,68],[394,82,357,69,"copyAsset"],[394,91,357,78],[394,93,357,80,"initialAssetLocalUri"],[394,113,357,100],[394,114,357,101],[395,2,358,0],[396,2,359,0],[397,2,360,0],[398,0,361,0],[399,0,362,0],[400,0,363,0],[401,0,364,0],[402,0,365,0],[403,0,366,0],[404,0,367,0],[405,0,368,0],[406,0,369,0],[407,2,370,7],[407,17,370,22,"deleteAlbumsAsync"],[407,34,370,39,"deleteAlbumsAsync"],[407,35,370,40,"albums"],[407,41,370,46],[407,43,370,48,"assetRemove"],[407,54,370,59],[407,57,370,62],[407,62,370,67],[407,64,370,69],[408,4,371,4],[408,8,371,8],[408,9,371,9,"MediaLibrary"],[408,34,371,21],[408,35,371,22,"deleteAlbumsAsync"],[408,52,371,39],[408,54,371,41],[409,6,372,8],[409,12,372,14],[409,16,372,18,"UnavailabilityError"],[409,52,372,37],[409,53,372,38],[409,67,372,52],[409,69,372,54],[409,88,372,73],[409,89,372,74],[410,4,373,4],[411,4,374,4],[411,10,374,10,"albumIds"],[411,18,374,18],[411,21,374,21,"arrayize"],[411,29,374,29],[411,30,374,30,"albums"],[411,36,374,36],[411,37,374,37],[411,38,374,38,"map"],[411,41,374,41],[411,42,374,42,"getId"],[411,47,374,47],[411,48,374,48],[412,4,375,4,"checkAlbumIds"],[412,17,375,17],[412,18,375,18,"albumIds"],[412,26,375,26],[412,27,375,27],[413,4,376,4],[413,8,376,8,"Platform"],[413,25,376,16],[413,26,376,17,"OS"],[413,28,376,19],[413,33,376,24],[413,42,376,33],[413,44,376,35],[414,6,377,8],[414,13,377,15],[414,19,377,21,"MediaLibrary"],[414,44,377,33],[414,45,377,34,"deleteAlbumsAsync"],[414,62,377,51],[414,63,377,52,"albumIds"],[414,71,377,60],[414,72,377,61],[415,4,378,4],[416,4,379,4],[416,11,379,11],[416,17,379,17,"MediaLibrary"],[416,42,379,29],[416,43,379,30,"deleteAlbumsAsync"],[416,60,379,47],[416,61,379,48,"albumIds"],[416,69,379,56],[416,71,379,58],[416,72,379,59],[416,73,379,60,"assetRemove"],[416,84,379,71],[416,85,379,72],[417,2,380,0],[418,2,381,0],[419,2,382,0],[420,0,383,0],[421,0,384,0],[422,0,385,0],[423,0,386,0],[424,2,387,7],[424,17,387,22,"getAssetsAsync"],[424,31,387,36,"getAssetsAsync"],[424,32,387,37,"assetsOptions"],[424,45,387,50],[424,48,387,53],[424,49,387,54],[424,50,387,55],[424,52,387,57],[425,4,388,4],[425,8,388,8],[425,9,388,9,"MediaLibrary"],[425,34,388,21],[425,35,388,22,"getAssetsAsync"],[425,49,388,36],[425,51,388,38],[426,6,389,8],[426,12,389,14],[426,16,389,18,"UnavailabilityError"],[426,52,389,37],[426,53,389,38],[426,67,389,52],[426,69,389,54],[426,85,389,70],[426,86,389,71],[427,4,390,4],[428,4,391,4],[428,10,391,10],[429,6,391,12,"first"],[429,11,391,17],[430,6,391,19,"after"],[430,11,391,24],[431,6,391,26,"album"],[431,11,391,31],[432,6,391,33,"sortBy"],[432,12,391,39],[433,6,391,41,"mediaType"],[433,15,391,50],[434,6,391,52,"createdAfter"],[434,18,391,64],[435,6,391,66,"createdBefore"],[435,19,391,79],[436,6,391,81,"mediaSubtypes"],[436,19,391,94],[437,6,391,96,"resolveWithFullInfo"],[438,4,391,117],[438,5,391,118],[438,8,391,121,"assetsOptions"],[438,21,391,134],[439,4,392,4],[439,10,392,10,"options"],[439,17,392,17],[439,20,392,20],[440,6,393,8,"first"],[440,11,393,13],[440,13,393,15,"first"],[440,18,393,20],[440,22,393,24],[440,26,393,28],[440,29,393,31],[440,31,393,33],[440,34,393,36,"first"],[440,39,393,41],[441,6,394,8,"after"],[441,11,394,13],[441,13,394,15,"getId"],[441,18,394,20],[441,19,394,21,"after"],[441,24,394,26],[441,25,394,27],[442,6,395,8,"album"],[442,11,395,13],[442,13,395,15,"getId"],[442,18,395,20],[442,19,395,21,"album"],[442,24,395,26],[442,25,395,27],[443,6,396,8,"sortBy"],[443,12,396,14],[443,14,396,16,"arrayize"],[443,22,396,24],[443,23,396,25,"sortBy"],[443,29,396,31],[443,30,396,32],[444,6,397,8,"mediaType"],[444,15,397,17],[444,17,397,19,"arrayize"],[444,25,397,27],[444,26,397,28,"mediaType"],[444,35,397,37],[444,39,397,41],[444,40,397,42,"MediaType"],[444,49,397,51],[444,50,397,52,"photo"],[444,55,397,57],[444,56,397,58],[444,57,397,59],[445,6,398,8,"mediaSubtypes"],[445,19,398,21],[445,21,398,23,"arrayize"],[445,29,398,31],[445,30,398,32,"mediaSubtypes"],[445,43,398,45],[445,44,398,46],[446,6,399,8,"createdAfter"],[446,18,399,20],[446,20,399,22,"dateToNumber"],[446,32,399,34],[446,33,399,35,"createdAfter"],[446,45,399,47],[446,46,399,48],[447,6,400,8,"createdBefore"],[447,19,400,21],[447,21,400,23,"dateToNumber"],[447,33,400,35],[447,34,400,36,"createdBefore"],[447,47,400,49],[447,48,400,50],[448,6,401,8,"resolveWithFullInfo"],[448,25,401,27],[448,27,401,29,"resolveWithFullInfo"],[448,46,401,48],[448,50,401,52],[449,4,402,4],[449,5,402,5],[450,4,403,4],[450,8,403,8,"first"],[450,13,403,13],[450,17,403,17],[450,21,403,21],[450,25,403,25],[450,32,403,32,"options"],[450,39,403,39],[450,40,403,40,"first"],[450,45,403,45],[450,50,403,50],[450,58,403,58],[450,60,403,60],[451,6,404,8],[451,12,404,14],[451,16,404,18,"Error"],[451,21,404,23],[451,22,404,24],[451,56,404,58],[451,57,404,59],[452,4,405,4],[453,4,406,4],[453,8,406,8,"after"],[453,13,406,13],[453,17,406,17],[453,21,406,21],[453,25,406,25],[453,32,406,32,"options"],[453,39,406,39],[453,40,406,40,"after"],[453,45,406,45],[453,50,406,50],[453,58,406,58],[453,60,406,60],[454,6,407,8],[454,12,407,14],[454,16,407,18,"Error"],[454,21,407,23],[454,22,407,24],[454,56,407,58],[454,57,407,59],[455,4,408,4],[456,4,409,4],[456,8,409,8,"album"],[456,13,409,13],[456,17,409,17],[456,21,409,21],[456,25,409,25],[456,32,409,32,"options"],[456,39,409,39],[456,40,409,40,"album"],[456,45,409,45],[456,50,409,50],[456,58,409,58],[456,60,409,60],[457,6,410,8],[457,12,410,14],[457,16,410,18,"Error"],[457,21,410,23],[457,22,410,24],[457,56,410,58],[457,57,410,59],[458,4,411,4],[459,4,412,4],[459,8,412,8,"after"],[459,13,412,13],[459,17,412,17],[459,21,412,21],[459,25,412,25,"Platform"],[459,42,412,33],[459,43,412,34,"OS"],[459,45,412,36],[459,50,412,41],[459,59,412,50],[459,63,412,54,"isNaN"],[459,68,412,59],[459,69,412,60,"parseInt"],[459,77,412,68],[459,78,412,69,"getId"],[459,83,412,74],[459,84,412,75,"after"],[459,89,412,80],[459,90,412,81],[459,92,412,83],[459,94,412,85],[459,95,412,86],[459,96,412,87],[459,98,412,89],[460,6,413,8],[460,12,413,14],[460,16,413,18,"Error"],[460,21,413,23],[460,22,413,24],[460,58,413,60],[460,59,413,61],[461,4,414,4],[462,4,415,4],[462,8,415,8,"first"],[462,13,415,13],[462,17,415,17],[462,21,415,21],[462,25,415,25,"first"],[462,30,415,30],[462,33,415,33],[462,34,415,34],[462,36,415,36],[463,6,416,8],[463,12,416,14],[463,16,416,18,"Error"],[463,21,416,23],[463,22,416,24],[463,66,416,68],[463,67,416,69],[464,4,417,4],[465,4,418,4,"options"],[465,11,418,11],[465,12,418,12,"mediaType"],[465,21,418,21],[465,22,418,22,"forEach"],[465,29,418,29],[465,30,418,30,"checkMediaType"],[465,44,418,44],[465,45,418,45],[466,4,419,4],[467,4,420,4],[467,11,420,11],[467,17,420,17,"MediaLibrary"],[467,42,420,29],[467,43,420,30,"getAssetsAsync"],[467,57,420,44],[467,58,420,44,"Object"],[467,64,420,44],[467,65,420,44,"assign"],[467,71,420,44],[467,76,421,11,"options"],[467,83,421,18],[468,6,422,8,"sortBy"],[468,12,422,14],[468,14,422,16,"options"],[468,21,422,23],[468,22,422,24,"sortBy"],[468,28,422,30],[468,29,422,31,"map"],[468,32,422,34],[468,33,422,35,"sortByOptionToString"],[468,53,422,55],[469,4,422,56],[469,6,423,5],[469,7,423,6],[470,2,424,0],[471,2,425,0],[472,2,426,0],[473,0,427,0],[474,0,428,0],[475,0,429,0],[476,0,430,0],[477,0,431,0],[478,0,432,0],[479,0,433,0],[480,0,434,0],[481,0,435,0],[482,0,436,0],[483,2,437,7],[483,11,437,16,"addListener"],[483,22,437,27,"addListener"],[483,23,437,28,"listener"],[483,31,437,36],[483,33,437,38],[484,4,438,4],[484,11,438,11,"MediaLibrary"],[484,36,438,23],[484,37,438,24,"addListener"],[484,48,438,35],[484,49,438,36,"MediaLibrary"],[484,74,438,48],[484,75,438,49,"CHANGE_LISTENER_NAME"],[484,95,438,69],[484,97,438,71,"listener"],[484,105,438,79],[484,106,438,80],[485,2,439,0],[486,2,440,0],[487,2,441,7],[487,11,441,16,"removeSubscription"],[487,29,441,34,"removeSubscription"],[487,30,441,35,"subscription"],[487,42,441,47],[487,44,441,49],[488,4,442,4,"subscription"],[488,16,442,16],[488,17,442,17,"remove"],[488,23,442,23],[488,24,442,24],[488,25,442,25],[489,2,443,0],[490,2,444,0],[491,2,445,0],[492,0,446,0],[493,0,447,0],[494,2,448,7],[494,11,448,16,"removeAllListeners"],[494,29,448,34,"removeAllListeners"],[494,30,448,34],[494,32,448,37],[495,4,449,4,"MediaLibrary"],[495,29,449,16],[495,30,449,17,"removeAllListeners"],[495,48,449,35],[495,49,449,36,"MediaLibrary"],[495,74,449,48],[495,75,449,49,"CHANGE_LISTENER_NAME"],[495,95,449,69],[495,96,449,70],[496,2,450,0],[497,2,451,0],[498,2,452,0],[499,0,453,0],[500,0,454,0],[501,0,455,0],[502,0,456,0],[503,0,457,0],[504,2,458,7],[504,17,458,22,"getMomentsAsync"],[504,32,458,37,"getMomentsAsync"],[504,33,458,37],[504,35,458,40],[505,4,459,4],[505,8,459,8],[505,9,459,9,"MediaLibrary"],[505,34,459,21],[505,35,459,22,"getMomentsAsync"],[505,50,459,37],[505,52,459,39],[506,6,460,8],[506,12,460,14],[506,16,460,18,"UnavailabilityError"],[506,52,460,37],[506,53,460,38],[506,67,460,52],[506,69,460,54],[506,86,460,71],[506,87,460,72],[507,4,461,4],[508,4,462,4],[508,11,462,11],[508,17,462,17,"MediaLibrary"],[508,42,462,29],[508,43,462,30,"getMomentsAsync"],[508,58,462,45],[508,59,462,46],[508,60,462,47],[509,2,463,0],[510,2,464,0],[511,2,465,0],[512,0,466,0],[513,0,467,0],[514,0,468,0],[515,0,469,0],[516,0,470,0],[517,0,471,0],[518,0,472,0],[519,0,473,0],[520,0,474,0],[521,0,475,0],[522,0,476,0],[523,0,477,0],[524,0,478,0],[525,0,479,0],[526,0,480,0],[527,0,481,0],[528,0,482,0],[529,0,483,0],[530,0,484,0],[531,0,485,0],[532,0,486,0],[533,0,487,0],[534,0,488,0],[535,0,489,0],[536,2,490,7],[536,17,490,22,"migrateAlbumIfNeededAsync"],[536,42,490,47,"migrateAlbumIfNeededAsync"],[536,43,490,48,"album"],[536,48,490,53],[536,50,490,55],[537,4,491,4],[537,8,491,8],[537,9,491,9,"MediaLibrary"],[537,34,491,21],[537,35,491,22,"migrateAlbumIfNeededAsync"],[537,60,491,47],[537,62,491,49],[538,6,492,8],[539,4,493,4],[540,4,494,4],[540,11,494,11],[540,17,494,17,"MediaLibrary"],[540,42,494,29],[540,43,494,30,"migrateAlbumIfNeededAsync"],[540,68,494,55],[540,69,494,56,"getId"],[540,74,494,61],[540,75,494,62,"album"],[540,80,494,67],[540,81,494,68],[540,82,494,69],[541,2,495,0],[542,2,496,0],[543,2,497,0],[544,0,498,0],[545,0,499,0],[546,0,500,0],[547,0,501,0],[548,0,502,0],[549,0,503,0],[550,2,504,7],[550,17,504,22,"albumNeedsMigrationAsync"],[550,41,504,46,"albumNeedsMigrationAsync"],[550,42,504,47,"album"],[550,47,504,52],[550,49,504,54],[551,4,505,4],[551,8,505,8],[551,9,505,9,"MediaLibrary"],[551,34,505,21],[551,35,505,22,"albumNeedsMigrationAsync"],[551,59,505,46],[551,61,505,48],[552,6,506,8],[552,13,506,15],[552,18,506,20],[553,4,507,4],[554,4,508,4],[554,11,508,11],[554,17,508,17,"MediaLibrary"],[554,42,508,29],[554,43,508,30,"albumNeedsMigrationAsync"],[554,67,508,54],[554,68,508,55,"getId"],[554,73,508,60],[554,74,508,61,"album"],[554,79,508,66],[554,80,508,67],[554,81,508,68],[555,2,509,0],[556,0,509,1],[556,3]],"functionMap":{"names":["<global>","arrayize","getId","checkAssetIds","assetIds.some$argument_0","checkAlbumIds","albumIds.some$argument_0","checkMediaType","checkSortBy","checkSortByKey","sortByOptionToString","dateToNumber","isAvailableAsync","requestPermissionsAsync","getPermissionsAsync","createPermissionHook$argument_0.getMethod","createPermissionHook$argument_0.requestMethod","presentPermissionsPickerAsync","createAssetAsync","saveToLibraryAsync","addAssetsToAlbumAsync","removeAssetsFromAlbumAsync","deleteAssetsAsync","getAssetInfoAsync","getAlbumsAsync","getAlbumAsync","createAlbumAsync","deleteAlbumsAsync","getAssetsAsync","addListener","removeSubscription","removeAllListeners","getMomentsAsync","migrateAlbumIfNeededAsync","albumNeedsMigrationAsync"],"mappings":"AAA;ACU;CDK;AEC;CFK;AGC;sBCC,qCD;CHG;AKC;sBCC,qCD;CLG;AOC;CPI;AQC;CRU;ASC;CTI;AUC;CVM;AWC;CXE;OYiB;CZE;OaW;CbQ;OcS;CdQ;eea,kFf;mBgBC,sFhB;OiBiB;CjBY;OkBkB;ClBc;OmBU;CnBK;OoBe;CpBc;OqBW;CrBQ;OsBS;CtBO;OuBQ;CvBY;OwBO;CxBK;OyBQ;CzBQ;O0BiB;C1BqB;O2BY;C3BU;O4BO;C5BqC;O6Ba;C7BE;O8BE;C9BE;O+BK;C/BE;OgCQ;ChCK;OiC2B;CjCK;OkCS;ClCK"}},"type":"js/module"}]}