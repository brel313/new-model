{"dependencies":[{"name":"./path","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":22,"column":0,"index":1134},"end":{"line":22,"column":38,"index":1172}}],"key":"fLgVgLGCXWzozZVWish/SygMBB4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.asUrl = asUrl;\n  exports.encodeURLChars = encodeURLChars;\n  exports.isUrl = isUrl;\n  var _path = require(_dependencyMap[0], \"./path\");\n  // Copyright Joyent, Inc. and other Node contributors.\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a\n  // copy of this software and associated documentation files (the\n  // \"Software\"), to deal in the Software without restriction, including\n  // without limitation the rights to use, copy, modify, merge, publish,\n  // distribute, sublicense, and/or sell copies of the Software, and to permit\n  // persons to whom the Software is furnished to do so, subject to the\n  // following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included\n  // in all copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n  const percentRegEx = /%/g;\n  const backslashRegEx = /\\\\/g;\n  const newlineRegEx = /\\n/g;\n  const carriageReturnRegEx = /\\r/g;\n  const tabRegEx = /\\t/g;\n  const questionRegex = /\\?/g;\n  const hashRegex = /#/g;\n  const spaceRegEx = / /g;\n  function encodePathChars(filepath) {\n    if (filepath.indexOf('%') !== -1) filepath = filepath.replace(percentRegEx, '%25');\n    // In posix, backslash is a valid character in paths:\n    if (filepath.indexOf('\\\\') !== -1) filepath = filepath.replace(backslashRegEx, '%5C');\n    if (filepath.indexOf('\\n') !== -1) filepath = filepath.replace(newlineRegEx, '%0A');\n    if (filepath.indexOf('\\r') !== -1) filepath = filepath.replace(carriageReturnRegEx, '%0D');\n    if (filepath.indexOf('\\t') !== -1) filepath = filepath.replace(tabRegEx, '%09');\n    if (filepath.indexOf(' ') !== -1) filepath = filepath.replace(spaceRegEx, '%20');\n    return filepath;\n  }\n  function encodeURLChars(path) {\n    let resolved = (0, _path.resolve)(path);\n    // path.resolve strips trailing slashes so we must add them back\n    const filePathLast = path.charAt(path.length - 1);\n    if (filePathLast === '/' && resolved[resolved.length - 1] !== _path.sep) resolved += '/';\n\n    // Call encodePathChars first to avoid encoding % again for ? and #.\n    resolved = encodePathChars(resolved);\n\n    // Question and hash character should be included in pathname.\n    // Therefore, encoding is required to eliminate parsing them in different states.\n    // This is done as an optimization to not creating a URL instance and\n    // later triggering pathname setter, which impacts performance\n    if (resolved.indexOf('?') !== -1) resolved = resolved.replace(questionRegex, '%3F');\n    if (resolved.indexOf('#') !== -1) resolved = resolved.replace(hashRegex, '%23');\n    return resolved;\n  }\n  function isUrl(url) {\n    try {\n      return !!new URL(url);\n    } catch (error) {\n      return false;\n    }\n  }\n  function asUrl(url) {\n    try {\n      const newUrl = new URL(url);\n      newUrl.hash = '';\n      return newUrl;\n    } catch (error) {\n      return null;\n    }\n  }\n});","lineCount":81,"map":[[8,2,22,0],[8,6,22,0,"_path"],[8,11,22,0],[8,14,22,0,"require"],[8,21,22,0],[8,22,22,0,"_dependencyMap"],[8,36,22,0],[9,2,1,0],[10,2,2,0],[11,2,3,0],[12,2,4,0],[13,2,5,0],[14,2,6,0],[15,2,7,0],[16,2,8,0],[17,2,9,0],[18,2,10,0],[19,2,11,0],[20,2,12,0],[21,2,13,0],[22,2,14,0],[23,2,15,0],[24,2,16,0],[25,2,17,0],[26,2,18,0],[27,2,19,0],[28,2,20,0],[30,2,24,0],[30,8,24,6,"percentRegEx"],[30,20,24,18],[30,23,24,21],[30,27,24,25],[31,2,25,0],[31,8,25,6,"backslashRegEx"],[31,22,25,20],[31,25,25,23],[31,30,25,28],[32,2,26,0],[32,8,26,6,"newlineRegEx"],[32,20,26,18],[32,23,26,21],[32,28,26,26],[33,2,27,0],[33,8,27,6,"carriageReturnRegEx"],[33,27,27,25],[33,30,27,28],[33,35,27,33],[34,2,28,0],[34,8,28,6,"tabRegEx"],[34,16,28,14],[34,19,28,17],[34,24,28,22],[35,2,29,0],[35,8,29,6,"questionRegex"],[35,21,29,19],[35,24,29,22],[35,29,29,27],[36,2,30,0],[36,8,30,6,"hashRegex"],[36,17,30,15],[36,20,30,18],[36,24,30,22],[37,2,31,0],[37,8,31,6,"spaceRegEx"],[37,18,31,16],[37,21,31,19],[37,25,31,23],[38,2,33,0],[38,11,33,9,"encodePathChars"],[38,26,33,24,"encodePathChars"],[38,27,33,25,"filepath"],[38,35,33,41],[38,37,33,43],[39,4,34,2],[39,8,34,6,"filepath"],[39,16,34,14],[39,17,34,15,"indexOf"],[39,24,34,22],[39,25,34,23],[39,28,34,26],[39,29,34,27],[39,34,34,32],[39,35,34,33],[39,36,34,34],[39,38,34,36,"filepath"],[39,46,34,44],[39,49,34,47,"filepath"],[39,57,34,55],[39,58,34,56,"replace"],[39,65,34,63],[39,66,34,64,"percentRegEx"],[39,78,34,76],[39,80,34,78],[39,85,34,83],[39,86,34,84],[40,4,35,2],[41,4,36,2],[41,8,36,6,"filepath"],[41,16,36,14],[41,17,36,15,"indexOf"],[41,24,36,22],[41,25,36,23],[41,29,36,27],[41,30,36,28],[41,35,36,33],[41,36,36,34],[41,37,36,35],[41,39,36,37,"filepath"],[41,47,36,45],[41,50,36,48,"filepath"],[41,58,36,56],[41,59,36,57,"replace"],[41,66,36,64],[41,67,36,65,"backslashRegEx"],[41,81,36,79],[41,83,36,81],[41,88,36,86],[41,89,36,87],[42,4,37,2],[42,8,37,6,"filepath"],[42,16,37,14],[42,17,37,15,"indexOf"],[42,24,37,22],[42,25,37,23],[42,29,37,27],[42,30,37,28],[42,35,37,33],[42,36,37,34],[42,37,37,35],[42,39,37,37,"filepath"],[42,47,37,45],[42,50,37,48,"filepath"],[42,58,37,56],[42,59,37,57,"replace"],[42,66,37,64],[42,67,37,65,"newlineRegEx"],[42,79,37,77],[42,81,37,79],[42,86,37,84],[42,87,37,85],[43,4,38,2],[43,8,38,6,"filepath"],[43,16,38,14],[43,17,38,15,"indexOf"],[43,24,38,22],[43,25,38,23],[43,29,38,27],[43,30,38,28],[43,35,38,33],[43,36,38,34],[43,37,38,35],[43,39,38,37,"filepath"],[43,47,38,45],[43,50,38,48,"filepath"],[43,58,38,56],[43,59,38,57,"replace"],[43,66,38,64],[43,67,38,65,"carriageReturnRegEx"],[43,86,38,84],[43,88,38,86],[43,93,38,91],[43,94,38,92],[44,4,39,2],[44,8,39,6,"filepath"],[44,16,39,14],[44,17,39,15,"indexOf"],[44,24,39,22],[44,25,39,23],[44,29,39,27],[44,30,39,28],[44,35,39,33],[44,36,39,34],[44,37,39,35],[44,39,39,37,"filepath"],[44,47,39,45],[44,50,39,48,"filepath"],[44,58,39,56],[44,59,39,57,"replace"],[44,66,39,64],[44,67,39,65,"tabRegEx"],[44,75,39,73],[44,77,39,75],[44,82,39,80],[44,83,39,81],[45,4,40,2],[45,8,40,6,"filepath"],[45,16,40,14],[45,17,40,15,"indexOf"],[45,24,40,22],[45,25,40,23],[45,28,40,26],[45,29,40,27],[45,34,40,32],[45,35,40,33],[45,36,40,34],[45,38,40,36,"filepath"],[45,46,40,44],[45,49,40,47,"filepath"],[45,57,40,55],[45,58,40,56,"replace"],[45,65,40,63],[45,66,40,64,"spaceRegEx"],[45,76,40,74],[45,78,40,76],[45,83,40,81],[45,84,40,82],[46,4,41,2],[46,11,41,9,"filepath"],[46,19,41,17],[47,2,42,0],[48,2,44,7],[48,11,44,16,"encodeURLChars"],[48,25,44,30,"encodeURLChars"],[48,26,44,31,"path"],[48,30,44,43],[48,32,44,45],[49,4,45,2],[49,8,45,6,"resolved"],[49,16,45,14],[49,19,45,17],[49,23,45,17,"resolve"],[49,36,45,24],[49,38,45,25,"path"],[49,42,45,29],[49,43,45,30],[50,4,46,2],[51,4,47,2],[51,10,47,8,"filePathLast"],[51,22,47,20],[51,25,47,23,"path"],[51,29,47,27],[51,30,47,28,"charAt"],[51,36,47,34],[51,37,47,35,"path"],[51,41,47,39],[51,42,47,40,"length"],[51,48,47,46],[51,51,47,49],[51,52,47,50],[51,53,47,51],[52,4,48,2],[52,8,48,6,"filePathLast"],[52,20,48,18],[52,25,48,23],[52,28,48,26],[52,32,48,30,"resolved"],[52,40,48,38],[52,41,48,39,"resolved"],[52,49,48,47],[52,50,48,48,"length"],[52,56,48,54],[52,59,48,57],[52,60,48,58],[52,61,48,59],[52,66,48,64,"sep"],[52,75,48,67],[52,77,48,69,"resolved"],[52,85,48,77],[52,89,48,81],[52,92,48,84],[54,4,50,2],[55,4,51,2,"resolved"],[55,12,51,10],[55,15,51,13,"encodePathChars"],[55,30,51,28],[55,31,51,29,"resolved"],[55,39,51,37],[55,40,51,38],[57,4,53,2],[58,4,54,2],[59,4,55,2],[60,4,56,2],[61,4,57,2],[61,8,57,6,"resolved"],[61,16,57,14],[61,17,57,15,"indexOf"],[61,24,57,22],[61,25,57,23],[61,28,57,26],[61,29,57,27],[61,34,57,32],[61,35,57,33],[61,36,57,34],[61,38,57,36,"resolved"],[61,46,57,44],[61,49,57,47,"resolved"],[61,57,57,55],[61,58,57,56,"replace"],[61,65,57,63],[61,66,57,64,"questionRegex"],[61,79,57,77],[61,81,57,79],[61,86,57,84],[61,87,57,85],[62,4,58,2],[62,8,58,6,"resolved"],[62,16,58,14],[62,17,58,15,"indexOf"],[62,24,58,22],[62,25,58,23],[62,28,58,26],[62,29,58,27],[62,34,58,32],[62,35,58,33],[62,36,58,34],[62,38,58,36,"resolved"],[62,46,58,44],[62,49,58,47,"resolved"],[62,57,58,55],[62,58,58,56,"replace"],[62,65,58,63],[62,66,58,64,"hashRegex"],[62,75,58,73],[62,77,58,75],[62,82,58,80],[62,83,58,81],[63,4,59,2],[63,11,59,9,"resolved"],[63,19,59,17],[64,2,60,0],[65,2,62,7],[65,11,62,16,"isUrl"],[65,16,62,21,"isUrl"],[65,17,62,22,"url"],[65,20,62,33],[65,22,62,35],[66,4,63,2],[66,8,63,6],[67,6,64,4],[67,13,64,11],[67,14,64,12],[67,15,64,13],[67,19,64,17,"URL"],[67,22,64,20],[67,23,64,21,"url"],[67,26,64,24],[67,27,64,25],[68,4,65,2],[68,5,65,3],[68,6,65,4],[68,13,65,11,"error"],[68,18,65,16],[68,20,65,18],[69,6,66,4],[69,13,66,11],[69,18,66,16],[70,4,67,2],[71,2,68,0],[72,2,70,7],[72,11,70,16,"asUrl"],[72,16,70,21,"asUrl"],[72,17,70,22,"url"],[72,20,70,39],[72,22,70,41],[73,4,71,2],[73,8,71,6],[74,6,72,4],[74,12,72,10,"newUrl"],[74,18,72,16],[74,21,72,19],[74,25,72,23,"URL"],[74,28,72,26],[74,29,72,27,"url"],[74,32,72,30],[74,33,72,31],[75,6,73,4,"newUrl"],[75,12,73,10],[75,13,73,11,"hash"],[75,17,73,15],[75,20,73,18],[75,22,73,20],[76,6,74,4],[76,13,74,11,"newUrl"],[76,19,74,17],[77,4,75,2],[77,5,75,3],[77,6,75,4],[77,13,75,11,"error"],[77,18,75,16],[77,20,75,18],[78,6,76,4],[78,13,76,11],[78,17,76,15],[79,4,77,2],[80,2,78,0],[81,0,78,1],[81,3]],"functionMap":{"names":["<global>","encodePathChars","encodeURLChars","isUrl","asUrl"],"mappings":"AAA;ACgC;CDS;OEE;CFgB;OGE;CHM;OIE;CJQ"}},"type":"js/module"}]}