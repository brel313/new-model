{"dependencies":[{"name":"./path","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":54},"end":{"line":2,"column":35,"index":89}}],"key":"fLgVgLGCXWzozZVWish/SygMBB4=","exportNames":["*"]}},{"name":"./url","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":90},"end":{"line":3,"column":53,"index":143}}],"key":"yvV8OElsINQcWHj+V4jjurOl35o=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.PathUtilities = void 0;\n  var nodePath = _interopRequireWildcard(require(_dependencyMap[0], \"./path\"));\n  var _url = require(_dependencyMap[1], \"./url\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  function uriObjectToString(path) {\n    return typeof path === 'string' ? path : path.uri;\n  }\n  class PathUtilities {\n    /**\n     * Joins path segments into a single path.\n     * @param paths - An array of path segments.\n     * @returns A string representing the joined path.\n     */\n    static join(...paths) {\n      const [firstSegment, ...rest] = paths.map(uriObjectToString);\n      const pathAsUrl = (0, _url.asUrl)(firstSegment);\n      if (pathAsUrl) {\n        pathAsUrl.pathname = nodePath.join(pathAsUrl.pathname, ...rest.map(_url.encodeURLChars));\n        return pathAsUrl.toString();\n      }\n      return nodePath.join(firstSegment, ...rest.map(_url.encodeURLChars));\n    }\n\n    /**\n     * Resolves a relative path to an absolute path.\n     * @param from - The base path.\n     * @param to - The relative path.\n     * @returns A string representing the resolved path.\n     */\n    static relative(from, to) {\n      const fromString = uriObjectToString(from);\n      const toString = uriObjectToString(to);\n\n      // If the first path is a file URL, convert it to a path\n      if ((0, _url.isUrl)(fromString)) {\n        from = (0, _url.asUrl)(fromString).pathname;\n      }\n      // If the second path is a file URL, convert it to a path\n      if ((0, _url.isUrl)(toString)) {\n        to = (0, _url.asUrl)(toString).pathname;\n      }\n      return nodePath.relative(fromString, toString);\n    }\n\n    /**\n     * Checks if a path is absolute.\n     * @param path - The path to check.\n     * @returns `true` if the path is absolute, `false` otherwise.\n     */\n    static isAbsolute(path) {\n      const pathString = uriObjectToString(path);\n      if ((0, _url.isUrl)(pathString)) {\n        return true;\n      }\n      return nodePath.isAbsolute(pathString);\n    }\n\n    /**\n     * Normalizes a path.\n     * @param path - The path to normalize.\n     * @returns A string representing the normalized path.\n     */\n    static normalize(path) {\n      const pathString = uriObjectToString(path);\n      const pathURL = (0, _url.asUrl)((0, _url.encodeURLChars)(pathString));\n      if (pathURL) {\n        pathURL.pathname = (0, _url.encodeURLChars)(nodePath.normalize(decodeURIComponent(pathURL.pathname)));\n        return pathURL.toString();\n      }\n      return nodePath.normalize(pathString);\n    }\n\n    /**\n     * Returns the directory name of a path.\n     * @param path - The path to get the directory name from.\n     * @returns A string representing the directory name.\n     */\n    static dirname(path) {\n      const pathString = uriObjectToString(path);\n      const pathURL = (0, _url.asUrl)(pathString);\n      if (pathURL) {\n        pathURL.pathname = (0, _url.encodeURLChars)(nodePath.dirname(decodeURIComponent(pathURL.pathname)));\n        return pathURL.toString();\n      }\n      return nodePath.dirname(pathString);\n    }\n\n    /**\n     * Returns the base name of a path.\n     * @param path - The path to get the base name from.\n     * @param ext - An optional file extension.\n     * @returns A string representing the base name.\n     */\n    static basename(path, ext) {\n      const pathString = uriObjectToString(path);\n      const pathURL = (0, _url.asUrl)(pathString);\n      if (pathURL) {\n        return nodePath.basename(decodeURIComponent(pathURL.pathname));\n      }\n      return nodePath.basename(pathString, ext);\n    }\n\n    /**\n     * Returns the extension of a path.\n     * @param path - The path to get the extension from.\n     * @returns A string representing the extension.\n     */\n    static extname(path) {\n      const pathString = uriObjectToString(path);\n      const pathURL = (0, _url.asUrl)(pathString);\n      if (pathURL) {\n        return nodePath.extname(decodeURIComponent(pathURL.pathname));\n      }\n      return nodePath.extname(pathString);\n    }\n\n    /**\n     * Parses a path into its components.\n     * @param path - The path to parse.\n     * @returns An object containing the parsed path components.\n     */\n    static parse(path) {\n      const pathString = uriObjectToString(path);\n      const pathURL = (0, _url.asUrl)(pathString);\n      if (pathURL) {\n        return nodePath.parse(decodeURIComponent(pathURL.pathname));\n      }\n      return nodePath.parse(pathString);\n    }\n  }\n  exports.PathUtilities = PathUtilities;\n});","lineCount":136,"map":[[6,2,2,0],[6,6,2,0,"nodePath"],[6,14,2,0],[6,17,2,0,"_interopRequireWildcard"],[6,40,2,0],[6,41,2,0,"require"],[6,48,2,0],[6,49,2,0,"_dependencyMap"],[6,63,2,0],[7,2,3,0],[7,6,3,0,"_url"],[7,10,3,0],[7,13,3,0,"require"],[7,20,3,0],[7,21,3,0,"_dependencyMap"],[7,35,3,0],[8,2,3,53],[8,11,3,53,"_interopRequireWildcard"],[8,35,3,53,"e"],[8,36,3,53],[8,38,3,53,"t"],[8,39,3,53],[8,68,3,53,"WeakMap"],[8,75,3,53],[8,81,3,53,"r"],[8,82,3,53],[8,89,3,53,"WeakMap"],[8,96,3,53],[8,100,3,53,"n"],[8,101,3,53],[8,108,3,53,"WeakMap"],[8,115,3,53],[8,127,3,53,"_interopRequireWildcard"],[8,150,3,53],[8,162,3,53,"_interopRequireWildcard"],[8,163,3,53,"e"],[8,164,3,53],[8,166,3,53,"t"],[8,167,3,53],[8,176,3,53,"t"],[8,177,3,53],[8,181,3,53,"e"],[8,182,3,53],[8,186,3,53,"e"],[8,187,3,53],[8,188,3,53,"__esModule"],[8,198,3,53],[8,207,3,53,"e"],[8,208,3,53],[8,214,3,53,"o"],[8,215,3,53],[8,217,3,53,"i"],[8,218,3,53],[8,220,3,53,"f"],[8,221,3,53],[8,226,3,53,"__proto__"],[8,235,3,53],[8,243,3,53,"default"],[8,250,3,53],[8,252,3,53,"e"],[8,253,3,53],[8,270,3,53,"e"],[8,271,3,53],[8,294,3,53,"e"],[8,295,3,53],[8,320,3,53,"e"],[8,321,3,53],[8,330,3,53,"f"],[8,331,3,53],[8,337,3,53,"o"],[8,338,3,53],[8,341,3,53,"t"],[8,342,3,53],[8,345,3,53,"n"],[8,346,3,53],[8,349,3,53,"r"],[8,350,3,53],[8,358,3,53,"o"],[8,359,3,53],[8,360,3,53,"has"],[8,363,3,53],[8,364,3,53,"e"],[8,365,3,53],[8,375,3,53,"o"],[8,376,3,53],[8,377,3,53,"get"],[8,380,3,53],[8,381,3,53,"e"],[8,382,3,53],[8,385,3,53,"o"],[8,386,3,53],[8,387,3,53,"set"],[8,390,3,53],[8,391,3,53,"e"],[8,392,3,53],[8,394,3,53,"f"],[8,395,3,53],[8,411,3,53,"t"],[8,412,3,53],[8,416,3,53,"e"],[8,417,3,53],[8,433,3,53,"t"],[8,434,3,53],[8,441,3,53,"hasOwnProperty"],[8,455,3,53],[8,456,3,53,"call"],[8,460,3,53],[8,461,3,53,"e"],[8,462,3,53],[8,464,3,53,"t"],[8,465,3,53],[8,472,3,53,"i"],[8,473,3,53],[8,477,3,53,"o"],[8,478,3,53],[8,481,3,53,"Object"],[8,487,3,53],[8,488,3,53,"defineProperty"],[8,502,3,53],[8,507,3,53,"Object"],[8,513,3,53],[8,514,3,53,"getOwnPropertyDescriptor"],[8,538,3,53],[8,539,3,53,"e"],[8,540,3,53],[8,542,3,53,"t"],[8,543,3,53],[8,550,3,53,"i"],[8,551,3,53],[8,552,3,53,"get"],[8,555,3,53],[8,559,3,53,"i"],[8,560,3,53],[8,561,3,53,"set"],[8,564,3,53],[8,568,3,53,"o"],[8,569,3,53],[8,570,3,53,"f"],[8,571,3,53],[8,573,3,53,"t"],[8,574,3,53],[8,576,3,53,"i"],[8,577,3,53],[8,581,3,53,"f"],[8,582,3,53],[8,583,3,53,"t"],[8,584,3,53],[8,588,3,53,"e"],[8,589,3,53],[8,590,3,53,"t"],[8,591,3,53],[8,602,3,53,"f"],[8,603,3,53],[8,608,3,53,"e"],[8,609,3,53],[8,611,3,53,"t"],[8,612,3,53],[9,2,5,0],[9,11,5,9,"uriObjectToString"],[9,28,5,26,"uriObjectToString"],[9,29,5,27,"path"],[9,33,5,58],[9,35,5,68],[10,4,6,2],[10,11,6,9],[10,18,6,16,"path"],[10,22,6,20],[10,27,6,25],[10,35,6,33],[10,38,6,36,"path"],[10,42,6,40],[10,45,6,43,"path"],[10,49,6,47],[10,50,6,48,"uri"],[10,53,6,51],[11,2,7,0],[12,2,9,7],[12,8,9,13,"PathUtilities"],[12,21,9,26],[12,22,9,27],[13,4,10,2],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,4,15,2],[18,11,15,9,"join"],[18,15,15,13,"join"],[18,16,15,14],[18,19,15,17,"paths"],[18,24,15,53],[18,26,15,63],[19,6,16,4],[19,12,16,10],[19,13,16,11,"firstSegment"],[19,25,16,23],[19,27,16,25],[19,30,16,28,"rest"],[19,34,16,32],[19,35,16,33],[19,38,16,36,"paths"],[19,43,16,41],[19,44,16,42,"map"],[19,47,16,45],[19,48,16,46,"uriObjectToString"],[19,65,16,63],[19,66,16,64],[20,6,17,4],[20,12,17,10,"pathAsUrl"],[20,21,17,19],[20,24,17,22],[20,28,17,22,"asUrl"],[20,38,17,27],[20,40,17,28,"firstSegment"],[20,52,17,40],[20,53,17,41],[21,6,18,4],[21,10,18,8,"pathAsUrl"],[21,19,18,17],[21,21,18,19],[22,8,19,6,"pathAsUrl"],[22,17,19,15],[22,18,19,16,"pathname"],[22,26,19,24],[22,29,19,27,"nodePath"],[22,37,19,35],[22,38,19,36,"join"],[22,42,19,40],[22,43,19,41,"pathAsUrl"],[22,52,19,50],[22,53,19,51,"pathname"],[22,61,19,59],[22,63,19,61],[22,66,19,64,"rest"],[22,70,19,68],[22,71,19,69,"map"],[22,74,19,72],[22,75,19,73,"encodeURLChars"],[22,94,19,87],[22,95,19,88],[22,96,19,89],[23,8,20,6],[23,15,20,13,"pathAsUrl"],[23,24,20,22],[23,25,20,23,"toString"],[23,33,20,31],[23,34,20,32],[23,35,20,33],[24,6,21,4],[25,6,22,4],[25,13,22,11,"nodePath"],[25,21,22,19],[25,22,22,20,"join"],[25,26,22,24],[25,27,22,25,"firstSegment"],[25,39,22,37],[25,41,22,39],[25,44,22,42,"rest"],[25,48,22,46],[25,49,22,47,"map"],[25,52,22,50],[25,53,22,51,"encodeURLChars"],[25,72,22,65],[25,73,22,66],[25,74,22,67],[26,4,23,2],[28,4,25,2],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,4,31,2],[34,11,31,9,"relative"],[34,19,31,17,"relative"],[34,20,31,18,"from"],[34,24,31,49],[34,26,31,51,"to"],[34,28,31,80],[34,30,31,90],[35,6,32,4],[35,12,32,10,"fromString"],[35,22,32,20],[35,25,32,23,"uriObjectToString"],[35,42,32,40],[35,43,32,41,"from"],[35,47,32,45],[35,48,32,46],[36,6,33,4],[36,12,33,10,"toString"],[36,20,33,18],[36,23,33,21,"uriObjectToString"],[36,40,33,38],[36,41,33,39,"to"],[36,43,33,41],[36,44,33,42],[38,6,35,4],[39,6,36,4],[39,10,36,8],[39,14,36,8,"isUrl"],[39,24,36,13],[39,26,36,14,"fromString"],[39,36,36,24],[39,37,36,25],[39,39,36,27],[40,8,37,6,"from"],[40,12,37,10],[40,15,37,13],[40,19,37,13,"asUrl"],[40,29,37,18],[40,31,37,19,"fromString"],[40,41,37,29],[40,42,37,30],[40,43,37,32,"pathname"],[40,51,37,40],[41,6,38,4],[42,6,39,4],[43,6,40,4],[43,10,40,8],[43,14,40,8,"isUrl"],[43,24,40,13],[43,26,40,14,"toString"],[43,34,40,22],[43,35,40,23],[43,37,40,25],[44,8,41,6,"to"],[44,10,41,8],[44,13,41,11],[44,17,41,11,"asUrl"],[44,27,41,16],[44,29,41,17,"toString"],[44,37,41,25],[44,38,41,26],[44,39,41,28,"pathname"],[44,47,41,36],[45,6,42,4],[46,6,43,4],[46,13,43,11,"nodePath"],[46,21,43,19],[46,22,43,20,"relative"],[46,30,43,28],[46,31,43,29,"fromString"],[46,41,43,39],[46,43,43,41,"toString"],[46,51,43,49],[46,52,43,50],[47,4,44,2],[49,4,46,2],[50,0,47,0],[51,0,48,0],[52,0,49,0],[53,0,50,0],[54,4,51,2],[54,11,51,9,"isAbsolute"],[54,21,51,19,"isAbsolute"],[54,22,51,20,"path"],[54,26,51,51],[54,28,51,62],[55,6,52,4],[55,12,52,10,"pathString"],[55,22,52,20],[55,25,52,23,"uriObjectToString"],[55,42,52,40],[55,43,52,41,"path"],[55,47,52,45],[55,48,52,46],[56,6,53,4],[56,10,53,8],[56,14,53,8,"isUrl"],[56,24,53,13],[56,26,53,14,"pathString"],[56,36,53,24],[56,37,53,25],[56,39,53,27],[57,8,54,6],[57,15,54,13],[57,19,54,17],[58,6,55,4],[59,6,56,4],[59,13,56,11,"nodePath"],[59,21,56,19],[59,22,56,20,"isAbsolute"],[59,32,56,30],[59,33,56,31,"pathString"],[59,43,56,41],[59,44,56,42],[60,4,57,2],[62,4,59,2],[63,0,60,0],[64,0,61,0],[65,0,62,0],[66,0,63,0],[67,4,64,2],[67,11,64,9,"normalize"],[67,20,64,18,"normalize"],[67,21,64,19,"path"],[67,25,64,50],[67,27,64,60],[68,6,65,4],[68,12,65,10,"pathString"],[68,22,65,20],[68,25,65,23,"uriObjectToString"],[68,42,65,40],[68,43,65,41,"path"],[68,47,65,45],[68,48,65,46],[69,6,66,4],[69,12,66,10,"pathURL"],[69,19,66,17],[69,22,66,20],[69,26,66,20,"asUrl"],[69,36,66,25],[69,38,66,26],[69,42,66,26,"encodeURLChars"],[69,61,66,40],[69,63,66,41,"pathString"],[69,73,66,51],[69,74,66,52],[69,75,66,53],[70,6,67,4],[70,10,67,8,"pathURL"],[70,17,67,15],[70,19,67,17],[71,8,68,6,"pathURL"],[71,15,68,13],[71,16,68,14,"pathname"],[71,24,68,22],[71,27,68,25],[71,31,68,25,"encodeURLChars"],[71,50,68,39],[71,52,68,40,"nodePath"],[71,60,68,48],[71,61,68,49,"normalize"],[71,70,68,58],[71,71,68,59,"decodeURIComponent"],[71,89,68,77],[71,90,68,78,"pathURL"],[71,97,68,85],[71,98,68,86,"pathname"],[71,106,68,94],[71,107,68,95],[71,108,68,96],[71,109,68,97],[72,8,69,6],[72,15,69,13,"pathURL"],[72,22,69,20],[72,23,69,21,"toString"],[72,31,69,29],[72,32,69,30],[72,33,69,31],[73,6,70,4],[74,6,71,4],[74,13,71,11,"nodePath"],[74,21,71,19],[74,22,71,20,"normalize"],[74,31,71,29],[74,32,71,30,"pathString"],[74,42,71,40],[74,43,71,41],[75,4,72,2],[77,4,74,2],[78,0,75,0],[79,0,76,0],[80,0,77,0],[81,0,78,0],[82,4,79,2],[82,11,79,9,"dirname"],[82,18,79,16,"dirname"],[82,19,79,17,"path"],[82,23,79,48],[82,25,79,58],[83,6,80,4],[83,12,80,10,"pathString"],[83,22,80,20],[83,25,80,23,"uriObjectToString"],[83,42,80,40],[83,43,80,41,"path"],[83,47,80,45],[83,48,80,46],[84,6,81,4],[84,12,81,10,"pathURL"],[84,19,81,17],[84,22,81,20],[84,26,81,20,"asUrl"],[84,36,81,25],[84,38,81,26,"pathString"],[84,48,81,36],[84,49,81,37],[85,6,82,4],[85,10,82,8,"pathURL"],[85,17,82,15],[85,19,82,17],[86,8,83,6,"pathURL"],[86,15,83,13],[86,16,83,14,"pathname"],[86,24,83,22],[86,27,83,25],[86,31,83,25,"encodeURLChars"],[86,50,83,39],[86,52,83,40,"nodePath"],[86,60,83,48],[86,61,83,49,"dirname"],[86,68,83,56],[86,69,83,57,"decodeURIComponent"],[86,87,83,75],[86,88,83,76,"pathURL"],[86,95,83,83],[86,96,83,84,"pathname"],[86,104,83,92],[86,105,83,93],[86,106,83,94],[86,107,83,95],[87,8,84,6],[87,15,84,13,"pathURL"],[87,22,84,20],[87,23,84,21,"toString"],[87,31,84,29],[87,32,84,30],[87,33,84,31],[88,6,85,4],[89,6,86,4],[89,13,86,11,"nodePath"],[89,21,86,19],[89,22,86,20,"dirname"],[89,29,86,27],[89,30,86,28,"pathString"],[89,40,86,38],[89,41,86,39],[90,4,87,2],[92,4,89,2],[93,0,90,0],[94,0,91,0],[95,0,92,0],[96,0,93,0],[97,0,94,0],[98,4,95,2],[98,11,95,9,"basename"],[98,19,95,17,"basename"],[98,20,95,18,"path"],[98,24,95,49],[98,26,95,51,"ext"],[98,29,95,63],[98,31,95,73],[99,6,96,4],[99,12,96,10,"pathString"],[99,22,96,20],[99,25,96,23,"uriObjectToString"],[99,42,96,40],[99,43,96,41,"path"],[99,47,96,45],[99,48,96,46],[100,6,97,4],[100,12,97,10,"pathURL"],[100,19,97,17],[100,22,97,20],[100,26,97,20,"asUrl"],[100,36,97,25],[100,38,97,26,"pathString"],[100,48,97,36],[100,49,97,37],[101,6,98,4],[101,10,98,8,"pathURL"],[101,17,98,15],[101,19,98,17],[102,8,99,6],[102,15,99,13,"nodePath"],[102,23,99,21],[102,24,99,22,"basename"],[102,32,99,30],[102,33,99,31,"decodeURIComponent"],[102,51,99,49],[102,52,99,50,"pathURL"],[102,59,99,57],[102,60,99,58,"pathname"],[102,68,99,66],[102,69,99,67],[102,70,99,68],[103,6,100,4],[104,6,101,4],[104,13,101,11,"nodePath"],[104,21,101,19],[104,22,101,20,"basename"],[104,30,101,28],[104,31,101,29,"pathString"],[104,41,101,39],[104,43,101,41,"ext"],[104,46,101,44],[104,47,101,45],[105,4,102,2],[107,4,104,2],[108,0,105,0],[109,0,106,0],[110,0,107,0],[111,0,108,0],[112,4,109,2],[112,11,109,9,"extname"],[112,18,109,16,"extname"],[112,19,109,17,"path"],[112,23,109,48],[112,25,109,58],[113,6,110,4],[113,12,110,10,"pathString"],[113,22,110,20],[113,25,110,23,"uriObjectToString"],[113,42,110,40],[113,43,110,41,"path"],[113,47,110,45],[113,48,110,46],[114,6,111,4],[114,12,111,10,"pathURL"],[114,19,111,17],[114,22,111,20],[114,26,111,20,"asUrl"],[114,36,111,25],[114,38,111,26,"pathString"],[114,48,111,36],[114,49,111,37],[115,6,112,4],[115,10,112,8,"pathURL"],[115,17,112,15],[115,19,112,17],[116,8,113,6],[116,15,113,13,"nodePath"],[116,23,113,21],[116,24,113,22,"extname"],[116,31,113,29],[116,32,113,30,"decodeURIComponent"],[116,50,113,48],[116,51,113,49,"pathURL"],[116,58,113,56],[116,59,113,57,"pathname"],[116,67,113,65],[116,68,113,66],[116,69,113,67],[117,6,114,4],[118,6,115,4],[118,13,115,11,"nodePath"],[118,21,115,19],[118,22,115,20,"extname"],[118,29,115,27],[118,30,115,28,"pathString"],[118,40,115,38],[118,41,115,39],[119,4,116,2],[121,4,118,2],[122,0,119,0],[123,0,120,0],[124,0,121,0],[125,0,122,0],[126,4,123,2],[126,11,123,9,"parse"],[126,16,123,14,"parse"],[126,17,123,15,"path"],[126,21,123,46],[126,23,129,4],[127,6,130,4],[127,12,130,10,"pathString"],[127,22,130,20],[127,25,130,23,"uriObjectToString"],[127,42,130,40],[127,43,130,41,"path"],[127,47,130,45],[127,48,130,46],[128,6,131,4],[128,12,131,10,"pathURL"],[128,19,131,17],[128,22,131,20],[128,26,131,20,"asUrl"],[128,36,131,25],[128,38,131,26,"pathString"],[128,48,131,36],[128,49,131,37],[129,6,132,4],[129,10,132,8,"pathURL"],[129,17,132,15],[129,19,132,17],[130,8,133,6],[130,15,133,13,"nodePath"],[130,23,133,21],[130,24,133,22,"parse"],[130,29,133,27],[130,30,133,28,"decodeURIComponent"],[130,48,133,46],[130,49,133,47,"pathURL"],[130,56,133,54],[130,57,133,55,"pathname"],[130,65,133,63],[130,66,133,64],[130,67,133,65],[131,6,134,4],[132,6,135,4],[132,13,135,11,"nodePath"],[132,21,135,19],[132,22,135,20,"parse"],[132,27,135,25],[132,28,135,26,"pathString"],[132,38,135,36],[132,39,135,37],[133,4,136,2],[134,2,137,0],[135,2,137,1,"exports"],[135,9,137,1],[135,10,137,1,"PathUtilities"],[135,23,137,1],[135,26,137,1,"PathUtilities"],[135,39,137,1],[136,0,137,1],[136,3]],"functionMap":{"names":["<global>","uriObjectToString","PathUtilities","PathUtilities.join","PathUtilities.relative","PathUtilities.isAbsolute","PathUtilities.normalize","PathUtilities.dirname","PathUtilities.basename","PathUtilities.extname","PathUtilities.parse"],"mappings":"AAA;ACI;CDE;OEE;ECM;GDQ;EEQ;GFa;EGO;GHM;EIO;GJQ;EKO;GLQ;EMQ;GNO;EOO;GPO;EQO;GRa;CFC"}},"type":"js/module"}]}